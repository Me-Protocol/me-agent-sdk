(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
    typeof define === 'function' && define.amd ? define(['exports'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.MeAgent = {}));
})(this, (function (exports) { 'use strict';

    /******************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise, SuppressedError, Symbol, Iterator */


    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
        var e = new Error(message);
        return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };

    const PRESET_CATEGORIES = [
        {
            id: 1,
            image: "https://res.cloudinary.com/dlwsf8xgj/image/upload/v1712589166/cate-1_qizn7y.png",
            title: "Must Haves",
            icon: "award",
            description: "Essential products you shouldn't miss",
            categoryNames: ["Must Haves", "Essentials"],
        },
        {
            id: 2,
            image: "https://res.cloudinary.com/dlwsf8xgj/image/upload/v1712589166/cate7_tbhw5u.png",
            title: "Cosmetics",
            icon: "shirt",
            description: "Beauty and personal care products",
            categoryNames: ["Cosmetics", "Beauty"],
        },
        {
            id: 3,
            image: "https://res.cloudinary.com/dlwsf8xgj/image/upload/v1712589167/cate2_gtjck8.png",
            title: "Travel &\nExperiences",
            icon: "heartPulse",
            description: "Destinations and unforgettable moments",
            categoryNames: ["Travel", "Experiences", "Travel & Experiences"],
        },
        {
            id: 6,
            image: "https://res.cloudinary.com/dlwsf8xgj/image/upload/v1712589167/cate-4_uxqxqx.png",
            title: "Sneakers",
            icon: "sofa",
            description: "Stylish footwear for all occasions",
            categoryNames: ["Sneakers", "Shoes", "Footwear"],
        },
        {
            id: 7,
            image: "https://res.cloudinary.com/dlwsf8xgj/image/upload/v1712589167/cate-5_zxqxqx.png",
            title: "Food &\nBeverages",
            icon: "tag",
            description: "Culinary delights and refreshments",
            categoryNames: [
                "Food",
                "Beverages",
                "Food & Beverages",
                "Food and beverages",
            ],
        },
        {
            id: 8,
            image: "https://res.cloudinary.com/dlwsf8xgj/image/upload/v1712589168/cate-3_sports.png",
            title: "Deals &\nSports",
            icon: "layoutGrid",
            description: "Sporting goods and special offers",
            categoryNames: ["Sports", "Sport deals", "Deals"],
        },
        {
            id: 5,
            image: "https://res.cloudinary.com/dlwsf8xgj/image/upload/v1712589167/cate-6_pfxfbq.png",
            title: "Gadgets &\nElectronics",
            icon: "laptop",
            description: "Tech products and accessories",
            categoryNames: ["Electronics", "Gadgets", "Tech"],
        },
        {
            id: 4,
            image: "https://res.cloudinary.com/dlwsf8xgj/image/upload/v1712589168/cate-8_s6yf5z.png",
            title: "Art &\nCollectibles",
            icon: "bookOpen",
            description: "Unique items for collectors",
            categoryNames: ["Art", "Collectibles", "Art & Collectibles"],
        },
    ];
    /**
     * Get preset category by category name from backend
     */
    function getCategoryPreset(categoryName) {
        return PRESET_CATEGORIES.find((preset) => preset.categoryNames.some((name) => name.toLowerCase() === categoryName.toLowerCase()));
    }
    /**
     * Merge backend categories with presets
     */
    function mergeCategoriesWithPresets(backendCategories) {
        return backendCategories.map((category) => {
            const preset = getCategoryPreset(category.categoryName);
            if (preset) {
                return Object.assign(Object.assign({}, category), { image: preset.image, title: preset.title, icon: preset.icon, description: preset.description });
            }
            return category;
        });
    }

    /**
     * State Manager - Handles chat state management
     */
    class StateManager {
        constructor() {
            this.state = {
                isOpen: false,
                messages: [],
                sessionId: null,
                isLoading: false,
            };
            this.listeners = new Set();
        }
        /**
         * Get current state
         */
        getState() {
            return Object.assign({}, this.state);
        }
        /**
         * Update state and notify listeners
         */
        setState(updates) {
            this.state = Object.assign(Object.assign({}, this.state), updates);
            this.notifyListeners();
        }
        /**
         * Subscribe to state changes
         */
        subscribe(listener) {
            this.listeners.add(listener);
            // Return unsubscribe function
            return () => {
                this.listeners.delete(listener);
            };
        }
        /**
         * Notify all listeners of state change
         */
        notifyListeners() {
            this.listeners.forEach((listener) => listener(this.state));
        }
        /**
         * Add a message to the chat
         */
        addMessage(message) {
            this.setState({
                messages: [...this.state.messages, message],
            });
        }
        /**
         * Update the last message (for streaming)
         */
        updateLastMessage(content) {
            const messages = [...this.state.messages];
            if (messages.length > 0) {
                messages[messages.length - 1] = Object.assign(Object.assign({}, messages[messages.length - 1]), { content });
                this.setState({ messages });
            }
        }
        /**
         * Set session ID
         */
        setSessionId(sessionId) {
            this.setState({ sessionId });
        }
        /**
         * Toggle chat open/closed
         */
        toggleChat() {
            this.setState({ isOpen: !this.state.isOpen });
        }
        /**
         * Set loading state
         */
        setLoading(isLoading) {
            this.setState({ isLoading });
        }
        /**
         * Clear all messages
         */
        clearMessages() {
            this.setState({ messages: [] });
        }
    }

    /**
     * API Client - Handles communication with backend
     */
    class APIClient {
        constructor(config, env) {
            this.config = config;
            this.env = env;
            this.userId = config.userId || this.generateUUID();
        }
        /**
         * Get user email from config
         */
        getUserEmail() {
            return this.config.emailAddress;
        }
        /**
         * Generate a UUID v4
         */
        generateUUID() {
            return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
                const r = (Math.random() * 16) | 0;
                const v = c === "x" ? r : (r & 0x3) | 0x8;
                return v.toString(16);
            });
        }
        /**
         * Create a new session
         */
        createSession() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const response = yield fetch(`${this.env.AGENT_BASE_URL}/apps/consumer/users/${this.userId}/sessions`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to create session: ${response.statusText}`);
                    }
                    const data = yield response.json();
                    return data.id;
                }
                catch (error) {
                    console.error("Error creating session:", error);
                    throw error;
                }
            });
        }
        /**
         * Send a message and handle streaming response
         */
        sendMessage(sessionId, message, onChunk, onComplete, onError) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
                try {
                    const payload = {
                        appName: "consumer",
                        userId: this.userId,
                        sessionId: sessionId,
                        newMessage: {
                            parts: [{ text: message }],
                            role: "user",
                        },
                        streaming: true,
                    };
                    const headers = {
                        "Content-Type": "application/json",
                    };
                    // Add email header if provided
                    if (this.config.emailAddress) {
                        headers["x-user-email"] = this.config.emailAddress;
                    }
                    const response = yield fetch(`${this.env.AGENT_BASE_URL}/run_sse`, {
                        method: "POST",
                        headers,
                        body: JSON.stringify(payload),
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to send message: ${response.statusText}`);
                    }
                    // Handle SSE streaming response
                    const reader = (_a = response.body) === null || _a === void 0 ? void 0 : _a.getReader();
                    const decoder = new TextDecoder();
                    if (!reader) {
                        throw new Error("Response body is not readable");
                    }
                    let buffer = "";
                    while (true) {
                        const { done, value } = yield reader.read();
                        if (done) {
                            onComplete();
                            break;
                        }
                        buffer += decoder.decode(value, { stream: true });
                        const lines = buffer.split("\n");
                        buffer = lines.pop() || "";
                        for (const line of lines) {
                            if (line.startsWith("data: ")) {
                                const data = line.slice(6).trim();
                                if (data && data !== "[DONE]") {
                                    try {
                                        const parsed = JSON.parse(data);
                                        // Extract text from content.parts[0].text
                                        if ((_d = (_c = (_b = parsed.content) === null || _b === void 0 ? void 0 : _b.parts) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.text) {
                                            const text = parsed.content.parts[0].text;
                                            // If partial=false, this is the final complete message
                                            // We should replace, not append
                                            onChunk(text, parsed);
                                        }
                                        else if ((_g = (_f = (_e = parsed.content) === null || _e === void 0 ? void 0 : _e.parts) === null || _f === void 0 ? void 0 : _f[0]) === null || _g === void 0 ? void 0 : _g.functionCall) {
                                            // Function call - pass along but no text chunk
                                            onChunk("", parsed);
                                        }
                                        else if ((_k = (_j = (_h = parsed.content) === null || _h === void 0 ? void 0 : _h.parts) === null || _j === void 0 ? void 0 : _j[0]) === null || _k === void 0 ? void 0 : _k.functionResponse) {
                                            // Function response - pass along but no text chunk
                                            onChunk("", parsed);
                                        }
                                        else if (parsed.chunk) {
                                            onChunk(parsed.chunk, parsed);
                                        }
                                        else if (parsed.text) {
                                            onChunk(parsed.text, parsed);
                                        }
                                    }
                                    catch (e) {
                                        // If not JSON, treat as plain text chunk
                                        onChunk(data);
                                    }
                                }
                            }
                        }
                    }
                }
                catch (error) {
                    console.error("Error sending message:", error);
                    onError(error);
                }
            });
        }
        /**
         * Fetch offer details
         */
        fetchOfferDetails(offerCode, sessionId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const response = yield fetch(`${this.env.API_V1_URL}store/offer/${offerCode}?sessionId=${sessionId}`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                        },
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to fetch offer details: ${response.statusText}`);
                    }
                    const result = yield response.json();
                    return result.data;
                }
                catch (error) {
                    console.error("Error fetching offer details:", error);
                    throw error;
                }
            });
        }
        /**
         * Fetch user reward balances
         */
        fetchRewardBalances(walletAddress, token) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const response = yield fetch(`${this.env.API_URL}reward/sdk/balances?walletAddress=${walletAddress}`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                            "x-access-token": token,
                        },
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to fetch reward balances: ${response.statusText}`);
                    }
                    const result = yield response.json();
                    return result.data || [];
                }
                catch (error) {
                    console.error("Error fetching reward balances:", error);
                    throw error;
                }
            });
        }
        /**
         * Fetch swap amount needed for redemption
         */
        fetchSwapAmount(payload, token) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const response = yield fetch(`${this.env.API_URL}reward/sdk/swap-amount`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "x-access-token": token,
                        },
                        body: JSON.stringify(payload),
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to fetch swap amount: ${response.statusText}`);
                    }
                    const result = yield response.json();
                    return result.data;
                }
                catch (error) {
                    console.error("Error fetching swap amount:", error);
                    throw error;
                }
            });
        }
        /**
         * Login to ME Protocol (creates account if new user)
         */
        meProtocolLogin(email, walletAddress) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const response = yield fetch(`${this.env.API_URL}auth/sdk/login`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                        },
                        body: JSON.stringify({
                            walletAddress,
                            email,
                        }),
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to login: ${response.statusText}`);
                    }
                    const data = yield response.json();
                    return data;
                }
                catch (error) {
                    console.error("Error in ME Protocol login:", error);
                    throw error;
                }
            });
        }
        /**
         * Fetch brands by category ID with purchase earning methods
         */
        fetchBrandsByCategoryId(categoryId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const response = yield fetch(`${this.env.API_URL}brands/earning-methods/purchase/categories/${categoryId}/brands`, {
                        method: "GET",
                        headers: {
                            "Content-Type": "application/json",
                        },
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to fetch brands by category: ${response.statusText}`);
                    }
                    const result = yield response.json();
                    return result.data || [];
                }
                catch (error) {
                    console.error("Error fetching brands by category:", error);
                    throw error;
                }
            });
        }
        /**
         * Fetch offers by brand ID
         */
        fetchOffersByBrandId(brandId, token) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a;
                try {
                    const headers = {
                        "Content-Type": "application/json",
                    };
                    if (token) {
                        headers["authorization"] = `Bearer ${token}`;
                    }
                    const response = yield fetch(`${this.env.API_V1_URL}store/offer?page=1&limit=50&brandId=${brandId}`, {
                        method: "GET",
                        headers,
                    });
                    if (!response.ok) {
                        throw new Error(`Failed to fetch offers: ${response.statusText}`);
                    }
                    const result = yield response.json();
                    return ((_a = result.data) === null || _a === void 0 ? void 0 : _a.offers) || [];
                }
                catch (error) {
                    console.error("Error fetching offers by brand:", error);
                    throw error;
                }
            });
        }
    }

    /**
     * SVG Icons for ME Agent SDK
     * Each icon function accepts optional width, height, and color parameters
     */
    /**
     * Main ME Agent Bot Icon (for the chat button)
     */
    function getBotIcon(options = {}) {
        const { width = 37, height = 40, color = "white", className = "" } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 37 40" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
      <path d="M23.4571 18.3143V21.1714M11.8857 18.3143V21.1714M13.3321 29.7429C13.3321 29.7429 14.7786 31.1714 17.6714 31.1714C20.5643 31.1714 22.0107 29.7429 22.0107 29.7429M16.225 18.3143V25.4572H17.6714" stroke="${color}" stroke-width="2.4" stroke-linecap="round" stroke-linejoin="round"/>
      <path d="M33.475 18.4767C33.9723 18.4767 34.4492 18.2791 34.8008 17.9275C35.1525 17.5759 35.35 17.099 35.35 16.6017V12.8517C35.35 12.3544 35.1525 11.8775 34.8008 11.5259C34.4492 11.1742 33.9723 10.9767 33.475 10.9767H3.475C2.97772 10.9767 2.50081 11.1742 2.14918 11.5259C1.79754 11.8775 1.6 12.3544 1.6 12.8517V16.6017C1.6 17.099 1.79754 17.5759 2.14918 17.9275C2.50081 18.2791 2.97772 18.4767 3.475 18.4767" stroke="${color}" stroke-width="3.2" stroke-linecap="round" stroke-linejoin="round"/>
      <path d="M10.0308 10.9758C8.7876 10.9758 7.59532 10.482 6.71624 9.6029C5.83716 8.72382 5.3433 7.53153 5.3433 6.28833C5.3433 5.04513 5.83716 3.85284 6.71624 2.97377C7.59532 2.09469 8.7876 1.60083 10.0308 1.60083C11.8396 1.56932 13.6121 2.44694 15.1172 4.11926C16.6223 5.79157 17.7901 8.18096 18.4683 10.9758C19.1465 8.18096 20.3143 5.79157 21.8194 4.11926C23.3245 2.44694 25.097 1.56932 26.9058 1.60083C28.149 1.60083 29.3413 2.09469 30.2204 2.97377C31.0994 3.85284 31.5933 5.04513 31.5933 6.28833C31.5933 7.53153 31.0994 8.72382 30.2204 9.6029C29.3413 10.482 28.149 10.9758 26.9058 10.9758" stroke="${color}" stroke-width="3.2" stroke-linecap="round" stroke-linejoin="round"/>
      <path d="M33.7429 18.3143C33.7429 18.3143 32.3666 18.3869 31.8143 18.9572C31.2733 19.5157 31.225 20.8589 31.225 20.8589V33.85C31.225 34.8446 30.8299 35.7984 30.1266 36.5017C29.4234 37.2049 28.4696 37.6 27.475 37.6L8.725 37.6C7.73044 37.6 6.77661 37.2049 6.07335 36.5017C5.37009 35.7984 4.975 34.8446 4.975 33.85V20.8589C4.975 20.8589 4.89952 19.6862 4.17143 18.9572C3.46158 18.2464 2.40357 18.1536 2.40357 18.1536" stroke="${color}" stroke-width="3.2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  `.trim();
    }
    /**
     * Close/X Icon (for close buttons)
     */
    function getCloseIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
        <path d="M8 8L13 13M8 8L3 3M8 8L3 13M8 8L13 3" stroke="${color}" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  `.trim();
    }
    /**
     * Send/Arrow Icon (for send message button)
     */
    function getSendIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
      <path d="M22 2L11 13M22 2L15 22L11 13M22 2L2 9L11 13" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  `.trim();
    }
    /**
     * Chevron/Arrow Back Icon (for back navigation)
     */
    function getChevronLeftIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
      <path d="M15 18L9 12L15 6" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  `.trim();
    }
    /**
     * Maximize/Expand Icon (for expanding the chat window)
     */
    function getMaximizeIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
        <rect x="2" y="3" width="12" height="10" rx="2" stroke="${color}"/>
        <rect x="8" y="4" width="5" height="8" rx="1" fill="${color}"/>
    </svg>
  `.trim();
    }
    /**
     * Minimize Icon (for minimizing the chat window)
     */
    function getMinimizeIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
        <rect x="2" y="3" width="12" height="10" rx="2" stroke="${color}"/>
        <rect x="8" y="4" width="5" height="8" rx="1" fill="${color}"/>
    </svg>
  `.trim();
    }
    /**
     * Gift/Rewards Icon (for rewards/offers)
     */
    function getGiftIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
      <rect x="3" y="8" width="18" height="4" rx="1" stroke="${color}" stroke-width="2"/>
      <rect x="5" y="12" width="14" height="9" rx="1" stroke="${color}" stroke-width="2"/>
      <path d="M12 8V21M9 8C9 6.34315 7.65685 5 6 5C4.34315 5 3 6.34315 3 8M15 8C15 6.34315 16.3431 5 18 5C19.6569 5 21 6.34315 21 8" stroke="${color}" stroke-width="2" stroke-linecap="round"/>
    </svg>
  `.trim();
    }
    /**
     * User Avatar Icon (GitHub-style)
     */
    function getUserAvatarIcon(options = {}) {
        const { width = 32, height = 32, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
      <circle cx="16" cy="16" r="16" fill="#667eea"/>
      <path d="M16 16C18.2091 16 20 14.2091 20 12C20 9.79086 18.2091 8 16 8C13.7909 8 12 9.79086 12 12C12 14.2091 13.7909 16 16 16Z" fill="white"/>
      <path d="M16 18C11.5817 18 8 20.6863 8 24V26H24V24C24 20.6863 20.4183 18 16 18Z" fill="white"/>
    </svg>
  `.trim();
    }
    /**
     * Assistant Avatar Icon (Bot)
     */
    function getAssistantAvatarIcon(options = {}) {
        const { width = 32, height = 32, color = "white", className = "" } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
        <rect width="${width}" height="${height}" rx="16" fill="#0F0F0F"/>
        <path d="M18.5513 15.9277V17.3563M12.7656 15.9277V17.3563M13.4888 21.642C13.4888 21.642 14.2121 22.3563 15.6585 22.3563C17.1049 22.3563 17.8281 21.642 17.8281 21.642M14.9353 15.9277V19.4992H15.6585" stroke="${color}" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M23.5625 15.4375C23.8111 15.4375 24.0496 15.3387 24.2254 15.1629C24.4012 14.9871 24.5 14.7486 24.5 14.5V12.625C24.5 12.3764 24.4012 12.1379 24.2254 11.9621C24.0496 11.7863 23.8111 11.6875 23.5625 11.6875H8.5625C8.31386 11.6875 8.0754 11.7863 7.89959 11.9621C7.72377 12.1379 7.625 12.3764 7.625 12.625V14.5C7.625 14.7486 7.72377 14.9871 7.89959 15.1629C8.0754 15.3387 8.31386 15.4375 8.5625 15.4375" stroke="${color}" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M11.8437 11.6879C11.2221 11.6879 10.626 11.441 10.1865 11.0014C9.74693 10.5619 9.5 9.96576 9.5 9.34416C9.5 8.72256 9.74693 8.12642 10.1865 7.68688C10.626 7.24734 11.2221 7.00041 11.8437 7.00041C12.7481 6.98465 13.6344 7.42347 14.3869 8.25962C15.1395 9.09578 15.7234 10.2905 16.0625 11.6879C16.4016 10.2905 16.9855 9.09578 17.7381 8.25962C18.4906 7.42347 19.3769 6.98465 20.2812 7.00041C20.9028 7.00041 21.499 7.24734 21.9385 7.68688C22.3781 8.12642 22.625 8.72256 22.625 9.34416C22.625 9.96576 22.3781 10.5619 21.9385 11.0014C21.499 11.441 20.9028 11.6879 20.2812 11.6879" stroke="${color}" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/>
        <path d="M23.6931 15.3577C23.6931 15.3577 23.005 15.394 22.7288 15.6791C22.4583 15.9584 22.4341 16.63 22.4341 16.63V23.1256C22.4341 23.6228 22.2366 24.0998 21.885 24.4514C21.5333 24.803 21.0564 25.0006 20.5592 25.0006L11.1842 25.0006C10.6869 25.0006 10.21 24.803 9.85833 24.4514C9.5067 24.0998 9.30915 23.6228 9.30915 23.1256V16.63C9.30915 16.63 9.27141 16.0437 8.90737 15.6791C8.55244 15.3237 8.02344 15.2773 8.02344 15.2773" stroke="${color}" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  `.trim();
    }
    /**
     * Search Icon (for quick actions)
     */
    function getSearchIcon(options = {}) {
        const { width = 20, height = 20, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
      <circle cx="11" cy="11" r="8" stroke="${color}" stroke-width="2"/>
      <path d="M21 21L16.5 16.5" stroke="${color}" stroke-width="2" stroke-linecap="round"/>
    </svg>
  `.trim();
    }
    /**
     * Sparkles Icon (for AI suggestions)
     */
    function getSparklesIcon(options = {}) {
        const { width = 20, height = 20, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
      <path d="M12 3L13.5 8.5L19 10L13.5 11.5L12 17L10.5 11.5L5 10L10.5 8.5L12 3Z" stroke="${color}" stroke-width="2" stroke-linejoin="round"/>
      <path d="M19 3L19.5 5L21.5 5.5L19.5 6L19 8L18.5 6L16.5 5.5L18.5 5L19 3Z" stroke="${color}" stroke-width="2" stroke-linejoin="round"/>
      <path d="M19 16L19.5 18L21.5 18.5L19.5 19L19 21L18.5 19L16.5 18.5L18.5 18L19 16Z" stroke="${color}" stroke-width="2" stroke-linejoin="round"/>
    </svg>
  `.trim();
    }
    /**
     * Chat Icon (for chat title)
     */
    function getChatIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `
    <svg width="${width}" height="${height}" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
        <path d="M17 4.16667V13.5C17 13.8094 16.8784 14.1062 16.662 14.325C16.4457 14.5437 16.1522 14.6667 15.8462 14.6667H6.25482L3.90386 16.72L3.89737 16.7251C3.68967 16.9031 3.42612 17.0005 3.15386 17C2.98459 16.9997 2.81744 16.9619 2.6642 16.8892C2.46488 16.7963 2.29624 16.6473 2.17845 16.4601C2.06066 16.2728 1.99872 16.0552 2.00002 15.8333V4.16667C2.00002 3.85725 2.12159 3.5605 2.33797 3.34171C2.55436 3.12292 2.84785 3 3.15386 3H15.8462C16.1522 3 16.4457 3.12292 16.662 3.34171C16.8784 3.5605 17 3.85725 17 4.16667Z" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
    </svg>
  `.trim();
    }
    /**
     * Arrow Right Icon (for card list button)
     */
    function getArrowRightIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `
  <svg width="${width}" height="${height}" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
    <path d="M13.3281 8L1.66146 8M13.3281 8L8.32813 3M13.3281 8L8.32813 13" stroke="${color}" stroke-width="1.6" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
`.trim();
    }
    /**
     * User Icon (for "Sign up for a brand" action)
     */
    function getUserIcon(options = {}) {
        const { width = 20, height = 20, color = "#999999", className = "", } = options;
        return `
  <svg width="${width}" height="${height}" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
    <path d="M9.5 2C5.35775 2 2 5.35775 2 9.5C2 13.6422 5.35775 17 9.5 17C13.6422 17 17 13.6422 17 9.5C17 5.35775 13.6422 2 9.5 2Z" stroke="${color}" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M3.70312 14.2605C3.70312 14.2605 5.37488 12.126 9.49988 12.126C13.6249 12.126 15.2974 14.2605 15.2974 14.2605M9.49988 9.50098C10.0966 9.50098 10.6689 9.26392 11.0909 8.84197C11.5128 8.42001 11.7499 7.84771 11.7499 7.25098C11.7499 6.65424 11.5128 6.08194 11.0909 5.65999C10.6689 5.23803 10.0966 5.00098 9.49988 5.00098C8.90314 5.00098 8.33084 5.23803 7.90888 5.65999C7.48693 6.08194 7.24988 6.65424 7.24988 7.25098C7.24988 7.84771 7.48693 8.42001 7.90888 8.84197C8.33084 9.26392 8.90314 9.50098 9.49988 9.50098Z" stroke="${color}" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
`.trim();
    }
    /**
     * Money Icon (for "Purchase from a brand" action)
     */
    function getMoneyIcon(options = {}) {
        const { width = 20, height = 20, color = "#999999", className = "", } = options;
        return `
  <svg width="${width}" height="${height}" viewBox="0 0 20 20" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
    <path d="M14.75 9.7315C14.501 9.69578 14.2509 9.66901 14 9.65125M5 11.0988C4.744 11.0808 4.494 11.054 4.25 11.0185M11.375 10.375C11.375 10.8723 11.1775 11.3492 10.8258 11.7008C10.4742 12.0525 9.99728 12.25 9.5 12.25C9.00272 12.25 8.52581 12.0525 8.17417 11.7008C7.82254 11.3492 7.625 10.8723 7.625 10.375C7.625 9.87772 7.82254 9.40081 8.17417 9.04917C8.52581 8.69754 9.00272 8.5 9.5 8.5C9.99728 8.5 10.4742 8.69754 10.8258 9.04917C11.1775 9.40081 11.375 9.87772 11.375 10.375Z" stroke="${color}" stroke-linecap="round" stroke-linejoin="round"/>
    <path d="M9.5 16C8.501 16.4665 7.18775 16.75 5.75 16.75C4.9505 16.75 4.19 16.6623 3.5 16.5048C2.375 16.2468 2 15.5695 2 14.4145V6.3355C2 5.59675 2.78 5.08975 3.5 5.25475C4.19 5.41225 4.9505 5.5 5.75 5.5C7.18775 5.5 8.501 5.2165 9.5 4.75C10.499 4.2835 11.8122 4 13.25 4C14.0495 4 14.81 4.08775 15.5 4.24525C16.6865 4.5175 17 5.215 17 6.3355V14.4145C17 15.1532 16.22 15.6602 15.5 15.4952C14.81 15.3377 14.0495 15.25 13.25 15.25C11.8122 15.25 10.499 15.5335 9.5 16Z" stroke="${color}" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
`.trim();
    }
    /**
     * External link icon
     */
    function getExternalLinkIcon(options = {}) {
        const { width = 12, height = 12, color = "#0F0F0F", className = "", } = options;
        return `
  <svg width="${width}" height="${height}" viewBox="0 0 12 12" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}">
    <path d="M8.25 1.125H10.875V3.75M10.3125 1.6875L7.5 4.5M6.375 1.875H3C2.70163 1.875 2.41548 1.99353 2.2045 2.2045C1.99353 2.41548 1.875 2.70163 1.875 3V9C1.875 9.29837 1.99353 9.58452 2.2045 9.7955C2.41548 10.0065 2.70163 10.125 3 10.125H9C9.29837 10.125 9.58452 10.0065 9.7955 9.7955C10.0065 9.58452 10.125 9.29837 10.125 9V5.625" stroke="${color}" stroke-linecap="round" stroke-linejoin="round"/>
  </svg>
`.trim();
    }
    /**
     * Award icon (for Must Haves category)
     */
    function getAwardIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}"><circle cx="12" cy="8" r="6" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M15.477 12.89L17 22L12 19L7 22L8.523 12.89" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`.trim();
    }
    /**
     * Shirt icon (for Cosmetics category)
     */
    function getShirtIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}"><path d="M20.38 3.46L16 2L13 8H11L9 8C9 6 7 2L2.62 3.46C2.22 3.6 2 4 2 4.42V9.58C2 10.02 2.22 10.42 2.58 10.58L7 12V22H17V12L21.42 10.58C21.78 10.42 22 10.02 22 9.58V4.42C22 4 21.78 3.6 21.38 3.46Z" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`.trim();
    }
    /**
     * Heart pulse icon (for Travel category)
     */
    function getHeartPulseIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}"><path d="M19 14C20.49 12.54 22 10.79 22 8.5C22 7.04131 21.4205 5.64236 20.3891 4.61091C19.3576 3.57946 17.9587 3 16.5 3C14.74 3 13.5 3.5 12 5C10.5 3.5 9.26 3 7.5 3C6.04131 3 4.64236 3.57946 3.61091 4.61091C2.57946 5.64236 2 7.04131 2 8.5C2 10.8 3.5 12.55 5 14" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M12 21L5 14H9L11 9L13 15L15 14H19L12 21Z" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`.trim();
    }
    /**
     * Sofa icon (for Sneakers category)
     */
    function getSofaIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}"><path d="M20 9V6C20 4.89543 19.1046 4 18 4H6C4.89543 4 4 4.89543 4 6V9" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M2 11V16C2 17.1046 2.89543 18 4 18H5" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M22 11V16C22 17.1046 21.1046 18 20 18H19" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M4 11C4 9.89543 4.89543 9 6 9H18C19.1046 9 20 9.89543 20 11V16H4V11Z" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M5 18V20" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M19 18V20" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`.trim();
    }
    /**
     * Tag icon (for Food & Beverages category)
     */
    function getTagIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}"><path d="M12 2L2 7L12 12L22 7L12 2Z" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M2 17L12 22L22 17" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M2 12L12 17L22 12" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`.trim();
    }
    /**
     * Layout grid icon (for Deals & Sports category)
     */
    function getLayoutGridIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}"><rect x="3" y="3" width="7" height="7" rx="1" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><rect x="14" y="3" width="7" height="7" rx="1" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><rect x="14" y="14" width="7" height="7" rx="1" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><rect x="3" y="14" width="7" height="7" rx="1" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`.trim();
    }
    /**
     * Laptop icon (for Gadgets & Electronics category)
     */
    function getLaptopIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}"><path d="M20 16V7C20 5.89543 19.1046 5 18 5H6C4.89543 5 4 5.89543 4 7V16" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M2 16H22" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M2 16L3 19H21L22 16" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`.trim();
    }
    /**
     * Book open icon (for Art & Collectibles category)
     */
    function getBookOpenIcon(options = {}) {
        const { width = 24, height = 24, color = "currentColor", className = "", } = options;
        return `<svg width="${width}" height="${height}" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="${className}"><path d="M2 3H8C9.06087 3 10.0783 3.42143 10.8284 4.17157C11.5786 4.92172 12 5.93913 12 7V21C12 20.2044 11.6839 19.4413 11.1213 18.8787C10.5587 18.3161 9.79565 18 9 18H2V3Z" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/><path d="M22 3H16C14.9391 3 13.9217 3.42143 13.1716 4.17157C12.4214 4.92172 12 5.93913 12 7V21C12 20.2044 12.3161 19.4413 12.8787 18.8787C13.4413 18.3161 14.2044 18 15 18H22V3Z" stroke="${color}" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/></svg>`.trim();
    }

    /**
     * Floating Button Component
     */
    class FloatingButton {
        constructor(position, onClick) {
            this.position = position;
            this.onClick = onClick;
            this.element = this.create();
        }
        /**
         * Create the button element
         */
        create() {
            const button = document.createElement("button");
            button.className = `me-agent-button ${this.position}`;
            button.setAttribute("aria-label", "Open chat");
            // Add bot icon
            button.innerHTML = getBotIcon({
                width: 32,
                height: 35,
                className: "me-agent-button-icon",
            });
            button.addEventListener("click", this.onClick);
            return button;
        }
        /**
         * Mount the button to the DOM
         */
        mount() {
            document.body.appendChild(this.element);
        }
        /**
         * Remove the button from the DOM
         */
        unmount() {
            this.element.remove();
        }
        /**
         * Get the button element
         */
        getElement() {
            return this.element;
        }
        /**
         * Hide the button
         */
        hide() {
            this.element.classList.add("hidden");
        }
        /**
         * Show the button
         */
        show() {
            this.element.classList.remove("hidden");
        }
    }

    /**
     * Message Component - Renders individual chat messages
     */
    class MessageComponent {
        /**
         * Parse markdown-style content and convert to HTML
         */
        static parseMarkdown(content) {
            if (!content)
                return "";
            // Convert markdown links [text](url) to HTML links
            // Special handling for offer links
            let html = content.replace(/\[([^\]]+)\]\((https?:\/\/[^\)]+)\)/g, (match, text, url) => {
                // Check if this is an offer link
                const offerMatch = url.match(/\/offer\/([^\/\s]+)/);
                if (offerMatch) {
                    const offerCode = offerMatch[1];
                    return `<a href="#" class="me-agent-offer-link" data-offer-code="${offerCode}">${text}</a>`;
                }
                // Regular external link
                return `<a href="${url}" target="_blank" rel="noopener noreferrer">${text}</a>`;
            });
            // Convert bold **text** to <strong>
            html = html.replace(/\*\*([^\*]+)\*\*/g, "<strong>$1</strong>");
            // Convert italic *text* to <em>
            html = html.replace(/\*([^\*]+)\*/g, "<em>$1</em>");
            // Convert line breaks to <br>
            html = html.replace(/\n/g, "<br>");
            return html;
        }
        /**
         * Get avatar for message role
         */
        static getAvatar(role) {
            if (role === "user") {
                return getUserAvatarIcon({
                    width: 32,
                    height: 32,
                    className: "me-agent-message-avatar",
                });
            }
            // Default to assistant avatar for "assistant" and "system" roles
            return getAssistantAvatarIcon({
                width: 32,
                height: 32,
                className: "me-agent-message-avatar",
            });
        }
        /**
         * Create a message element
         */
        static create(message, onOfferClick) {
            const messageDiv = document.createElement("div");
            messageDiv.className = `me-agent-message ${message.role}`;
            messageDiv.setAttribute("data-message-id", message.id);
            // Avatar
            const avatarDiv = document.createElement("div");
            avatarDiv.className = "me-agent-message-avatar-wrapper";
            avatarDiv.innerHTML = this.getAvatar(message.role);
            // Content wrapper
            const contentWrapper = document.createElement("div");
            contentWrapper.className = "me-agent-message-content-wrapper";
            const contentDiv = document.createElement("div");
            contentDiv.className = "me-agent-message-content";
            // Parse markdown and set as HTML
            contentDiv.innerHTML = this.parseMarkdown(message.content);
            // Add click handlers for offer links
            if (onOfferClick) {
                const offerLinks = contentDiv.querySelectorAll(".me-agent-offer-link");
                offerLinks.forEach((link) => {
                    link.addEventListener("click", (e) => {
                        e.preventDefault();
                        const offerCode = link.getAttribute("data-offer-code");
                        if (offerCode) {
                            onOfferClick(offerCode);
                        }
                    });
                });
            }
            contentWrapper.appendChild(contentDiv);
            messageDiv.appendChild(avatarDiv);
            messageDiv.appendChild(contentWrapper);
            return messageDiv;
        }
        /**
         * Create a loading indicator
         */
        static createLoading() {
            const loadingDiv = document.createElement("div");
            loadingDiv.className = "me-agent-message assistant";
            loadingDiv.setAttribute("data-loading", "true");
            // Avatar
            const avatarDiv = document.createElement("div");
            avatarDiv.className = "me-agent-message-avatar-wrapper";
            avatarDiv.innerHTML = this.getAvatar("assistant");
            // Content wrapper
            const contentWrapper = document.createElement("div");
            contentWrapper.className = "me-agent-message-content-wrapper";
            const contentDiv = document.createElement("div");
            contentDiv.className = "me-agent-message-content";
            const loadingIndicator = document.createElement("div");
            loadingIndicator.className = "me-agent-loading";
            loadingIndicator.innerHTML = `
      <span class="me-agent-loading-text">Typing</span>
      <span class="me-agent-loading-dots">
        <span class="me-agent-loading-dot"></span>
        <span class="me-agent-loading-dot"></span>
        <span class="me-agent-loading-dot"></span>
      </span>
    `;
            contentDiv.appendChild(loadingIndicator);
            contentWrapper.appendChild(contentDiv);
            loadingDiv.appendChild(avatarDiv);
            loadingDiv.appendChild(contentWrapper);
            return loadingDiv;
        }
        /**
         * Update message content (for streaming)
         */
        static updateContent(element, content, onOfferClick) {
            const contentDiv = element.querySelector(".me-agent-message-content");
            if (contentDiv) {
                // Parse markdown and update HTML
                contentDiv.innerHTML = this.parseMarkdown(content);
                // Re-attach click handlers for offer links
                if (onOfferClick) {
                    const offerLinks = contentDiv.querySelectorAll(".me-agent-offer-link");
                    offerLinks.forEach((link) => {
                        link.addEventListener("click", (e) => {
                            e.preventDefault();
                            const offerCode = link.getAttribute("data-offer-code");
                            if (offerCode) {
                                onOfferClick(offerCode);
                            }
                        });
                    });
                }
            }
        }
        /**
         * Append a card list or other element to a message's content wrapper
         */
        static appendToMessage(messageElement, element) {
            const contentWrapper = messageElement.querySelector(".me-agent-message-content-wrapper");
            if (contentWrapper) {
                contentWrapper.appendChild(element);
            }
        }
    }

    /**
     * Quick Actions Component - Renders a list of actionable items
     */
    class QuickActionsComponent {
        /**
         * Get icon for action type
         */
        static getIconForAction(action) {
            const iconMap = {
                search: () => getSearchIcon({
                    width: 18,
                    height: 18,
                    className: "me-agent-quick-action-icon",
                }),
                offers: () => getGiftIcon({
                    width: 18,
                    height: 18,
                    className: "me-agent-quick-action-icon",
                }),
                tags: () => getTagIcon({
                    width: 18,
                    height: 18,
                    className: "me-agent-quick-action-icon",
                }),
                suggestions: () => getSparklesIcon({
                    width: 18,
                    height: 18,
                    className: "me-agent-quick-action-icon",
                }),
                user: () => getUserIcon({
                    width: 18,
                    height: 18,
                    className: "me-agent-quick-action-icon",
                }),
                money: () => getMoneyIcon({
                    width: 18,
                    height: 18,
                    className: "me-agent-quick-action-icon",
                }),
            };
            // Use icon from action if specified, otherwise use type-based icon
            if (action.icon && iconMap[action.icon]) {
                return iconMap[action.icon]();
            }
            // Default to sparkles icon
            return getSparklesIcon({
                width: 18,
                height: 18,
                className: "me-agent-quick-action-icon",
            });
        }
        /**
         * Create quick actions list
         */
        static create(actions, onClick) {
            const container = document.createElement("div");
            container.className = "me-agent-quick-actions";
            actions.forEach((action) => {
                const button = document.createElement("button");
                button.className = "me-agent-quick-action-button";
                button.setAttribute("data-action-id", action.id);
                const icon = this.getIconForAction(action);
                button.innerHTML = `
        ${icon}
        <span class="me-agent-quick-action-text">${action.label}</span>
      `;
                button.addEventListener("click", () => onClick(action));
                container.appendChild(button);
            });
            return container;
        }
        /**
         * Create a message with quick actions
         */
        static createMessageWithActions(content, actions, messageId, onActionClick) {
            const wrapper = document.createElement("div");
            wrapper.className = "me-agent-message-with-actions";
            wrapper.setAttribute("data-message-id", messageId);
            // Message content
            const contentDiv = document.createElement("div");
            contentDiv.className = "me-agent-message-actions-content";
            contentDiv.textContent = content;
            // Quick actions
            const actionsContainer = this.create(actions, onActionClick);
            wrapper.appendChild(contentDiv);
            wrapper.appendChild(actionsContainer);
            return wrapper;
        }
    }

    /**
     * Card List Component - Reusable component for displaying lists in chat
     * Can be used for offers, earnings, recommendations, etc.
     */
    class CardList {
        /**
         * Create a card list element
         */
        static create(config) {
            const container = document.createElement("div");
            container.className = "me-agent-card-list";
            // Create preview with avatars (show up to 3, plus a 4th with count if more)
            const maxVisible = 3;
            const previewItems = config.items.slice(0, maxVisible);
            const remainingCount = config.items.length - maxVisible;
            const avatarGroup = previewItems
                .map((item, index) => {
                const imageUrl = item.image || `https://via.placeholder.com/40x40?text=${index + 1}`;
                return `<div class="me-agent-card-avatar" style="background-image: url('${imageUrl}'); z-index: ${index + 1};"></div>`;
            })
                .join("");
            // Add overlay avatar if there are more items
            const overlayAvatar = remainingCount > 0
                ? (() => {
                    // Get the next image (4th item) to show as background
                    const nextItem = config.items[maxVisible];
                    const overlayImage = (nextItem === null || nextItem === void 0 ? void 0 : nextItem.image) ||
                        `https://via.placeholder.com/40x40?text=${maxVisible + 1}`;
                    return `<div class="me-agent-card-avatar me-agent-card-avatar-overlay" style="background-image: url('${overlayImage}'); z-index: ${maxVisible + 1};">
            <span class="me-agent-card-avatar-count">+${remainingCount > 99 ? "99+" : remainingCount}</span>
           </div>`;
                })()
                : "";
            container.innerHTML = `
      <div class="me-agent-card-list-content">
        <div class="me-agent-card-avatars">
          ${avatarGroup}
          ${overlayAvatar}
        </div>
        <div class="me-agent-card-list-text">
          <p class="me-agent-card-list-title">${config.title || `${config.items.length} items found`}</p>
          ${config.actionLabel
            ? `<button class="me-agent-card-list-button">${config.actionLabel}${getArrowRightIcon({
                width: 16,
                height: 16,
                color: "#0F0F0F",
            })}</button>`
            : ""}
        </div>
      </div>
    `;
            // Add event listener for action button
            if (config.onAction) {
                const button = container.querySelector(".me-agent-card-list-button");
                button === null || button === void 0 ? void 0 : button.addEventListener("click", config.onAction);
            }
            return container;
        }
    }

    /**
     * Offer Preview Card - Shows in chat after AI response
     * Uses the generic CardList component
     */
    class OfferPreviewCard {
        /**
         * Create offer preview card element
         */
        static create(offers, onViewOffers) {
            // Convert offers to card list items
            const items = offers.map((offer) => ({
                id: offer.offerCode || offer.id,
                image: offer.image,
                title: offer.name,
                subtitle: offer.brandName,
            }));
            // Use the generic CardList component
            return CardList.create({
                items,
                title: `Here are ${offers.length} ${offers.length === 1 ? "offer" : "offers"} we found for you`,
                actionLabel: "View offers",
                onAction: () => onViewOffers(offers),
            });
        }
    }

    /**
     * OTP Verification View Component
     */
    class OTPView {
        /**
         * Render OTP verification view
         */
        static render(onBack, onClose, onSuccess, redeemManager, autoSendOTP = false) {
            const configEmail = redeemManager.getEmail() || "";
            const isEmailPreFilled = !!configEmail;
            return `
      <div class="me-agent-offers-header">
        <button class="me-agent-offers-back" aria-label="Back">
          ${getChevronLeftIcon({ width: 20, height: 20 })}
          <span>Back</span>
        </button>
        <h3 class="me-agent-offers-title">Verify Email</h3>
        <button class="me-agent-offers-close" aria-label="Close offers">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-otp-container">
        <p class="me-agent-otp-description">${autoSendOTP
            ? "Please check your email for the one-time password we just sent."
            : "We'll send a one-time password to your email to verify your identity."}</p>
        
        <div class="me-agent-otp-form" style="${autoSendOTP ? "display: none;" : ""}">
          <input 
            type="email" 
            class="me-agent-otp-email-input" 
            placeholder="Enter your email address"
            value="${configEmail}"
            ${isEmailPreFilled ? "readonly" : ""}
            required
          />
          <button class="me-agent-otp-send-button">Send OTP</button>
        </div>

        <div class="me-agent-otp-status" style="display: ${autoSendOTP ? "block" : "none"};">${autoSendOTP
            ? "OTP sent! Please check your email and complete verification."
            : ""}</div>
      </div>
    `;
        }
        /**
         * Setup event listeners for OTP view
         */
        static setupListeners(element, onBack, onClose, onSuccess, redeemManager, autoSendOTP = false) {
            const backBtn = element.querySelector(".me-agent-offers-back");
            backBtn === null || backBtn === void 0 ? void 0 : backBtn.addEventListener("click", onBack);
            const closeBtn = element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", onClose);
            const emailInput = element.querySelector(".me-agent-otp-email-input");
            const sendBtn = element.querySelector(".me-agent-otp-send-button");
            const statusDiv = element.querySelector(".me-agent-otp-status");
            // If auto-send is enabled, start polling for authentication immediately
            if (autoSendOTP) {
                this.startAuthPolling(redeemManager, onSuccess);
                return;
            }
            // Manual OTP send
            if (sendBtn) {
                sendBtn.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {
                    const email = emailInput === null || emailInput === void 0 ? void 0 : emailInput.value.trim();
                    if (!email) {
                        this.showStatus(statusDiv, "Please enter a valid email address", "error");
                        return;
                    }
                    try {
                        sendBtn.disabled = true;
                        sendBtn.textContent = "Sending...";
                        statusDiv.style.display = "none";
                        yield redeemManager.sendOTP(email);
                        this.showStatus(statusDiv, "OTP sent! Please check your email and complete verification.", "success");
                        // Start polling for authentication
                        this.startAuthPolling(redeemManager, onSuccess);
                    }
                    catch (error) {
                        console.error("Error sending OTP:", error);
                        this.showStatus(statusDiv, error.message || "Failed to send OTP. Please try again.", "error");
                        sendBtn.disabled = false;
                        sendBtn.textContent = "Send OTP";
                    }
                }));
            }
        }
        /**
         * Start polling for authentication status
         */
        static startAuthPolling(redeemManager, onSuccess) {
            const pollInterval = setInterval(() => __awaiter(this, void 0, void 0, function* () {
                try {
                    const isAuthenticated = yield redeemManager.isAuthenticated();
                    if (isAuthenticated) {
                        clearInterval(pollInterval);
                        onSuccess();
                    }
                }
                catch (error) {
                    console.error("Error checking authentication:", error);
                }
            }), 2000); // Poll every 2 seconds
            // Stop polling after 5 minutes
            setTimeout(() => {
                clearInterval(pollInterval);
            }, 300000);
        }
        /**
         * Show status message
         */
        static showStatus(element, message, type) {
            element.textContent = message;
            element.className = `me-agent-otp-status me-agent-otp-status-${type}`;
            element.style.display = "block";
        }
    }

    /**
     * Reward Selection View Component
     */
    class RewardSelectionView {
        /**
         * Render reward selection view
         */
        static render(balances) {
            return `
      <div class="me-agent-offers-header">
        <button class="me-agent-offers-back" aria-label="Back">
          ${getChevronLeftIcon({ width: 20, height: 20 })}
          <span>Back</span>
        </button>
        <h3 class="me-agent-offers-title">Select Reward</h3>
        <button class="me-agent-offers-close" aria-label="Close offers">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-rewards-container">
        <p class="me-agent-rewards-description">Choose a reward to redeem this offer:</p>
        
        <div class="me-agent-rewards-list">
          ${balances
            .map((balance, index) => this.renderRewardItem(balance, index))
            .join("")}
        </div>
      </div>
    `;
        }
        /**
         * Render individual reward item
         */
        static renderRewardItem(balance, index) {
            const imageUrl = balance.reward.image || "https://via.placeholder.com/60x60?text=Reward";
            return `
      <div class="me-agent-reward-item" data-index="${index}">
        <div class="me-agent-reward-image" style="background-image: url('${imageUrl}')"></div>
        <div class="me-agent-reward-info">
          <h4 class="me-agent-reward-name">${balance.reward.name}</h4>
          <p class="me-agent-reward-symbol">${balance.reward.symbol}</p>
          <p class="me-agent-reward-balance">Balance: ${balance.balance.toLocaleString()}</p>
        </div>
        <button class="me-agent-reward-select-button">Select</button>
      </div>
    `;
        }
        /**
         * Setup event listeners
         */
        static setupListeners(element, balances, onBack, onClose, onSelect) {
            const backBtn = element.querySelector(".me-agent-offers-back");
            backBtn === null || backBtn === void 0 ? void 0 : backBtn.addEventListener("click", onBack);
            const closeBtn = element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", onClose);
            const selectButtons = element.querySelectorAll(".me-agent-reward-select-button");
            selectButtons.forEach((btn, index) => {
                btn.addEventListener("click", () => onSelect(balances[index]));
            });
        }
    }

    /**
     * Affordability Error View Component
     */
    class AffordabilityErrorView {
        /**
         * Render error view
         */
        static render(reward, amountNeeded) {
            return `
      <div class="me-agent-offers-header">
        <button class="me-agent-offers-back" aria-label="Back">
          ${getChevronLeftIcon({ width: 20, height: 20 })}
          <span>Back</span>
        </button>
        <h3 class="me-agent-offers-title">Insufficient Balance</h3>
        <button class="me-agent-offers-close" aria-label="Close offers">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-error-container">
        <div class="me-agent-error-icon">⚠️</div>
        <h3>Cannot Afford This Offer</h3>
        <p>You need <strong>${amountNeeded.toFixed(2)} ${reward.reward.symbol}</strong> to redeem this offer.</p>
        <p>Your current balance: <strong>${reward.balance.toFixed(2)} ${reward.reward.symbol}</strong></p>
        <p>Please select a different reward or earn more to continue.</p>
        <button class="me-agent-error-back-button">Select Different Reward</button>
      </div>
    `;
        }
        /**
         * Setup event listeners
         */
        static setupListeners(element, onBack, onClose) {
            const backBtn = element.querySelector(".me-agent-offers-back");
            backBtn === null || backBtn === void 0 ? void 0 : backBtn.addEventListener("click", onBack);
            const closeBtn = element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", onClose);
            const errorBackBtn = element.querySelector(".me-agent-error-back-button");
            errorBackBtn === null || errorBackBtn === void 0 ? void 0 : errorBackBtn.addEventListener("click", onBack);
        }
    }

    /**
     * Confirmation View Component
     */
    class ConfirmationView {
        /**
         * Render confirmation view
         */
        static render(reward, swapAmount, offerDetail) {
            return `
      <div class="me-agent-offers-header">
        <button class="me-agent-offers-back" aria-label="Back">
          ${getChevronLeftIcon({ width: 20, height: 20 })}
          <span>Back</span>
        </button>
        <h3 class="me-agent-offers-title">Confirm Redemption</h3>
        <button class="me-agent-offers-close" aria-label="Close offers">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-confirm-container">
        <div class="me-agent-confirm-summary">
          <h3>Redemption Summary</h3>
          
          <div class="me-agent-confirm-item">
            <span>Offer:</span>
            <strong>${offerDetail.name}</strong>
          </div>
          
          <div class="me-agent-confirm-item">
            <span>Reward Used:</span>
            <strong>${reward.reward.name} (${reward.reward.symbol})</strong>
          </div>
          
          <div class="me-agent-confirm-item">
            <span>Amount Required:</span>
            <strong>${swapAmount.amountNeeded.toFixed(2)} ${reward.reward.symbol}</strong>
          </div>
          
          <div class="me-agent-confirm-item">
            <span>Your Balance After:</span>
            <strong>${(reward.balance - swapAmount.amountNeeded).toFixed(2)} ${reward.reward.symbol}</strong>
          </div>
          
          <div class="me-agent-confirm-item">
            <span>You Save:</span>
            <strong class="me-agent-confirm-savings">$${swapAmount.usdDiscount.toFixed(2)}</strong>
          </div>
        </div>
        
        <button class="me-agent-confirm-button">Continue to Redemption</button>
      </div>
    `;
        }
        /**
         * Setup event listeners
         */
        static setupListeners(element, onBack, onClose, onConfirm) {
            const backBtn = element.querySelector(".me-agent-offers-back");
            backBtn === null || backBtn === void 0 ? void 0 : backBtn.addEventListener("click", onBack);
            const closeBtn = element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", onClose);
            const confirmBtn = element.querySelector(".me-agent-confirm-button");
            confirmBtn === null || confirmBtn === void 0 ? void 0 : confirmBtn.addEventListener("click", onConfirm);
        }
    }

    /**
     * Loading View Component
     * Shows a loading state while user is being authenticated to ME Protocol
     */
    class OnboardingView {
        /**
         * Render loading view
         */
        static render() {
            return `
      <div class="me-agent-offers-header">
        <h3 class="me-agent-offers-title">Please wait</h3>
      </div>
      <div class="me-agent-onboarding-container">
        <div class="me-agent-onboarding-spinner"></div>
        <h3 class="me-agent-onboarding-title">Setting up your account...</h3>
        <p class="me-agent-onboarding-description">
          This will only take a moment.
        </p>
        <div class="me-agent-onboarding-status">Please wait...</div>
      </div>
    `;
        }
        /**
         * Start login process
         */
        static startOnboarding(element, redeemManager, onSuccess, onError) {
            return __awaiter(this, void 0, void 0, function* () {
                const statusDiv = element.querySelector(".me-agent-onboarding-status");
                try {
                    if (statusDiv) {
                        statusDiv.textContent = "Authenticating...";
                    }
                    // Login to ME Protocol (creates account if new user)
                    yield redeemManager.loginToMEProtocol();
                    if (statusDiv) {
                        statusDiv.textContent = "Almost done...";
                    }
                    // Small delay to show success
                    yield new Promise((resolve) => setTimeout(resolve, 500));
                    onSuccess();
                }
                catch (error) {
                    console.error("Login error:", error);
                    onError(error.message || "Failed to authenticate. Please try again.");
                }
            });
        }
    }

    /**
     * Detail Panel Component - Handles side panel for offers, earnings, redemption, etc.
     */
    class DetailPanel {
        constructor(onClose, onOfferClick, config, apiClient, redeemManager) {
            this.currentView = "grid";
            this.offers = [];
            this.brands = [];
            this.categories = [];
            this.redeemManager = null;
            this.currentOfferDetail = null;
            this.selectedVariant = null;
            this.selectedReward = null;
            this.swapAmount = null;
            this.likedOffers = {};
            this.onClose = onClose;
            this.onOfferClick = onOfferClick;
            this.config = config;
            this.apiClient = apiClient;
            this.likedOffers = config.likedOffers || {};
            this.redeemManager = redeemManager || null;
            this.element = this.create();
        }
        /**
         * Create the offers panel element
         */
        create() {
            const panel = document.createElement("div");
            panel.className = "me-agent-detail-panel";
            return panel;
        }
        /**
         * Show offers grid
         */
        showGrid(offers) {
            this.offers = offers;
            this.currentView = "grid";
            this.element.innerHTML = `
      <div class="me-agent-offers-header">
        <h3 class="me-agent-offers-title">Available Offers</h3>
        <button class="me-agent-offers-close" aria-label="Close offers">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-offers-grid">
        ${offers.map((offer) => this.createOfferCard(offer)).join("")}
      </div>
    `;
            // Add event listeners
            const closeBtn = this.element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", this.onClose);
            const cards = this.element.querySelectorAll(".me-agent-offer-card");
            cards.forEach((card, index) => {
                card.addEventListener("click", () => {
                    this.onOfferClick(offers[index].offerCode);
                });
            });
        }
        /**
         * Show brands detail list
         */
        showBrandsDetail(brands) {
            this.brands = brands;
            this.currentView = "brands";
            const brandCardsHtml = brands
                .map((brand) => this.createBrandCard(brand))
                .join("");
            this.element.innerHTML = `
      <div class="me-agent-offers-header">
        <h3 class="me-agent-offers-title">Brands</h3>
        <button class="me-agent-offers-close" aria-label="Close">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-brands-list">
        ${brandCardsHtml}
      </div>
    `;
            // Add event listeners
            const closeBtn = this.element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", this.onClose);
            // Show the panel
            this.show();
        }
        /**
         * Format number with commas
         */
        formatNumber(num) {
            return num.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
        }
        /**
         * Create a brand card HTML
         */
        createBrandCard(brand) {
            var _a, _b, _c, _d, _e, _f, _g;
            const logoUrl = brand.logoUrl ||
                `https://via.placeholder.com/80x80?text=${brand.name.charAt(0)}`;
            // Get reward details
            const points = ((_c = (_b = (_a = brand.rewardDetails) === null || _a === void 0 ? void 0 : _a.rules) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.points) || 0;
            const formattedPoints = this.formatNumber(points);
            const rewardSymbol = ((_e = (_d = brand.rewardDetails) === null || _d === void 0 ? void 0 : _d.rewardInfo) === null || _e === void 0 ? void 0 : _e.rewardSymbol) || "";
            const rewardOriginalValue = parseFloat(((_g = (_f = brand.rewardDetails) === null || _f === void 0 ? void 0 : _f.rewardInfo) === null || _g === void 0 ? void 0 : _g.rewardOriginalValue) || "0");
            // Create conversion rate display (1 SYMBOL = $X.XX)
            const conversionRate = rewardOriginalValue > 0
                ? `1 ${rewardSymbol} = $${rewardOriginalValue.toFixed(2)}`
                : "";
            // Create callback URL with current origin
            const currentOrigin = typeof window !== "undefined" ? window.location.origin : "";
            const callbackUrl = encodeURIComponent(`${currentOrigin}?brand=${brand.id}&action=signup`);
            // Construct signup URL - use shopifyStoreUrl if available, otherwise websiteUrl
            let signupUrl = "#";
            if (brand.shopifyStoreUrl) {
                // For Shopify stores, add https:// if not present and append callback
                const shopifyUrl = brand.shopifyStoreUrl.startsWith("http")
                    ? brand.shopifyStoreUrl
                    : `https://${brand.shopifyStoreUrl}`;
                signupUrl = `${shopifyUrl}?return_to=${callbackUrl}`;
            }
            else if (brand.websiteUrl) {
                signupUrl = `${brand.websiteUrl}?return_to=${callbackUrl}`;
            }
            return `
      <div class="me-agent-brand-card" data-brand-id="${brand.id}">
        <div class="me-agent-brand-logo-container">
          <img src="${logoUrl}" alt="${brand.name}" class="me-agent-brand-logo" />
        </div>
        <div class="me-agent-brand-info">
          <h4 class="me-agent-brand-name">${brand.name}</h4>
          ${conversionRate
            ? `<p class="me-agent-brand-conversion">${conversionRate}</p>`
            : ""}
        </div>
        <div class="me-agent-brand-actions">
          ${points
            ? `<div class="me-agent-brand-reward-amount">${formattedPoints} <span class="me-agent-brand-reward-symbol">${rewardSymbol}</span></div>`
            : ""}
          <a href="${signupUrl}" target="_blank" rel="noopener noreferrer" class="me-agent-brand-signup-button">
            <span>Sign Up & Earn</span>
            ${getExternalLinkIcon({ width: 12, height: 12, color: "#0F0F0F" })}
          </a>
        </div>
      </div>
    `;
        }
        /**
         * Show categories detail with 3-column grid
         */
        showCategoriesDetail(categories) {
            this.categories = categories;
            this.currentView = "categories";
            const categoryCardsHtml = categories
                .map((category) => this.createCategoryCard(category))
                .join("");
            this.element.innerHTML = `
      <div class="me-agent-offers-header">
        <h3 class="me-agent-offers-title">Categories</h3>
        <button class="me-agent-offers-close" aria-label="Close">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-categories-grid">
        ${categoryCardsHtml}
      </div>
    `;
            // Add event listeners
            const closeBtn = this.element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", this.onClose);
            // Add click listeners to category cards
            const categoryCards = this.element.querySelectorAll(".me-agent-category-card");
            categoryCards.forEach((card) => {
                card.addEventListener("click", () => __awaiter(this, void 0, void 0, function* () {
                    const categoryId = card.getAttribute("data-category-id");
                    if (categoryId) {
                        yield this.handleCategoryClick(categoryId);
                    }
                }));
            });
            // Show the panel
            this.show();
        }
        /**
         * Handle category card click - fetch brands and offers
         */
        handleCategoryClick(categoryId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    // Show loading state
                    this.element.innerHTML = `
        <div class="me-agent-offers-header">
          <button class="me-agent-offers-back" aria-label="Back">${getChevronLeftIcon({ width: 20, height: 20 })}</button>
          <h3 class="me-agent-offers-title">Loading...</h3>
          <button class="me-agent-offers-close" aria-label="Close">${getCloseIcon({ width: 20, height: 20 })}</button>
        </div>
        <div class="me-agent-brands-list">
          <div class="me-agent-loading">Loading brands...</div>
        </div>
      `;
                    // Fetch brands with purchase earning methods for this category
                    const brands = yield this.apiClient.fetchBrandsByCategoryId(categoryId);
                    // Fetch offers for each brand in parallel
                    const brandsWithOffers = yield Promise.all(brands.map((brand) => __awaiter(this, void 0, void 0, function* () {
                        try {
                            const offers = yield this.apiClient.fetchOffersByBrandId(brand.id);
                            return Object.assign(Object.assign({}, brand), { offers });
                        }
                        catch (error) {
                            console.error(`Error fetching offers for brand ${brand.id}:`, error);
                            return Object.assign(Object.assign({}, brand), { offers: [] });
                        }
                    })));
                    // Filter out brands with no offers
                    const brandsWithProducts = brandsWithOffers.filter((brand) => brand.offers && brand.offers.length > 0);
                    // Show brands with offers
                    this.showBrandsWithOffers(brandsWithProducts, categoryId);
                }
                catch (error) {
                    console.error("Error handling category click:", error);
                    // Show error state
                    this.element.innerHTML = `
        <div class="me-agent-offers-header">
          <button class="me-agent-offers-back" aria-label="Back">${getChevronLeftIcon({ width: 20, height: 20 })}</button>
          <h3 class="me-agent-offers-title">Error</h3>
          <button class="me-agent-offers-close" aria-label="Close">${getCloseIcon({ width: 20, height: 20 })}</button>
        </div>
        <div class="me-agent-brands-list">
          <p>Failed to load brands. Please try again.</p>
        </div>
      `;
                }
            });
        }
        /**
         * Show brands with their offers
         */
        showBrandsWithOffers(brandsWithOffers, categoryId) {
            const brandsHtml = brandsWithOffers
                .map((brand) => this.createBrandWithOffersCard(brand))
                .join("");
            this.element.innerHTML = `
      <div class="me-agent-offers-header">
        <button class="me-agent-offers-back" aria-label="Back">${getChevronLeftIcon({ width: 20, height: 20 })}</button>
        <h3 class="me-agent-offers-title">Brands & Offers</h3>
        <button class="me-agent-offers-close" aria-label="Close">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-brands-offers-list">
        ${brandsHtml ||
            '<p class="me-agent-empty-state">No brands found with available offers.</p>'}
      </div>
    `;
            // Add event listeners
            const backBtn = this.element.querySelector(".me-agent-offers-back");
            backBtn === null || backBtn === void 0 ? void 0 : backBtn.addEventListener("click", () => {
                this.showCategoriesDetail(this.categories);
            });
            const closeBtn = this.element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", this.onClose);
            // Add click listeners to offer cards
            const offerCards = this.element.querySelectorAll(".me-agent-brand-offer-card");
            offerCards.forEach((card) => {
                card.addEventListener("click", () => {
                    const productUrl = card.getAttribute("data-product-url");
                    if (productUrl) {
                        // Open product URL in new tab
                        window.open(productUrl, "_blank", "noopener,noreferrer");
                    }
                });
            });
        }
        /**
         * Create a brand card with horizontal offers
         */
        createBrandWithOffersCard(brand) {
            var _a, _b, _c, _d, _e, _f, _g;
            const logoUrl = brand.logoUrl ||
                `https://via.placeholder.com/60x60?text=${brand.name.charAt(0)}`;
            // Calculate earning amount (percentage of purchase)
            const earningPercentage = ((_c = (_b = (_a = brand.rewardDetails) === null || _a === void 0 ? void 0 : _a.rules) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.earningPercentage) || 0;
            const rewardSymbol = ((_e = (_d = brand.rewardDetails) === null || _d === void 0 ? void 0 : _d.rewardInfo) === null || _e === void 0 ? void 0 : _e.rewardSymbol) || "PTS";
            const rewardOriginalValue = parseFloat(((_g = (_f = brand.rewardDetails) === null || _f === void 0 ? void 0 : _f.rewardInfo) === null || _g === void 0 ? void 0 : _g.rewardOriginalValue) || "0");
            // Format earning display
            const earningDisplay = rewardOriginalValue > 0
                ? `Earn ${earningPercentage}% back (1 ${rewardSymbol} = $${rewardOriginalValue.toFixed(2)})`
                : `Earn ${earningPercentage}% back in ${rewardSymbol}`;
            // Create offers HTML
            const offersHtml = brand.offers
                .slice(0, 10) // Limit to 10 offers per brand
                .map((offer) => this.createBrandOfferCard(offer))
                .join("");
            return `
      <div class="me-agent-brand-offers-section">
        <div class="me-agent-brand-offers-header">
          <div class="me-agent-brand-offers-info">
            <img src="${logoUrl}" alt="${brand.name}" class="me-agent-brand-offers-logo" />
            <h4 class="me-agent-brand-offers-name">${brand.name}</h4>
          </div>
          <div class="me-agent-brand-earning-amount">${earningDisplay}</div>
        </div>
        <div class="me-agent-brand-offers-scroll">
          ${offersHtml}
        </div>
      </div>
    `;
        }
        /**
         * Create an offer card for brand offers view
         */
        createBrandOfferCard(offer) {
            var _a;
            const imageUrl = offer.coverImage || "https://via.placeholder.com/200x200?text=No+Image";
            const discountPercentage = parseFloat(offer.discountPercentage || "0");
            const originalPrice = parseFloat(offer.originalPrice || "0");
            const discountedPrice = originalPrice * (1 - discountPercentage / 100);
            // Extract product URL from the offer
            const productUrl = ((_a = offer.product) === null || _a === void 0 ? void 0 : _a.productUrl) || "";
            const fullProductUrl = productUrl && !productUrl.startsWith("http")
                ? `https://${productUrl}`
                : productUrl;
            return `
      <div class="me-agent-brand-offer-card" data-offer-code="${offer.offerCode}" data-product-url="${fullProductUrl}">
        <div class="me-agent-brand-offer-image-container">
          <img src="${imageUrl}" alt="${offer.name}" class="me-agent-brand-offer-image" />
          ${discountPercentage > 0
            ? `<div class="me-agent-brand-offer-badge">${discountPercentage.toFixed(0)}% OFF</div>`
            : ""}
        </div>
        <div class="me-agent-brand-offer-info">
          <h5 class="me-agent-brand-offer-name">${offer.name}</h5>
          <div class="me-agent-brand-offer-pricing">
            ${discountPercentage > 0
            ? `
              <span class="me-agent-brand-offer-price">$${discountedPrice.toFixed(2)}</span>
              <span class="me-agent-brand-offer-original-price">$${originalPrice.toFixed(2)}</span>
            `
            : `<span class="me-agent-brand-offer-price">$${originalPrice.toFixed(2)}</span>`}
          </div>
        </div>
      </div>
    `;
        }
        /**
         * Create a category card HTML
         */
        createCategoryCard(category) {
            const iconMap = {
                award: () => getAwardIcon({ width: 16, height: 16, color: "white" }),
                shirt: () => getShirtIcon({ width: 24, height: 24, color: "white" }),
                heartPulse: () => getHeartPulseIcon({ width: 16, height: 16, color: "white" }),
                sofa: () => getSofaIcon({ width: 16, height: 16, color: "white" }),
                tag: () => getTagIcon({ width: 16, height: 16, color: "white" }),
                layoutGrid: () => getLayoutGridIcon({ width: 16, height: 16, color: "white" }),
                laptop: () => getLaptopIcon({ width: 16, height: 16, color: "white" }),
                bookOpen: () => getBookOpenIcon({ width: 16, height: 16, color: "white" }),
            };
            const iconSvg = category.icon && iconMap[category.icon] ? iconMap[category.icon]() : "";
            const title = (category.title || category.categoryName).replace(/\n/g, "<br>");
            const brandCountText = `${category.brandCount} ${category.brandCount === 1 ? "Brand" : "Brands"}`;
            return `
      <div class="me-agent-category-card" data-category-id="${category.categoryId}">
        <div class="me-agent-category-icon-overlay">
          ${iconSvg}
        </div>
        <div class="me-agent-category-info">
          <h4 class="me-agent-category-title">${title}</h4>
          <p class="me-agent-category-brand-count">${brandCountText}</p>
        </div>
      </div>
    `;
        }
        /**
         * Create an offer card HTML
         */
        createOfferCard(offer) {
            const imageUrl = offer.image || "https://via.placeholder.com/300x200?text=No+Image";
            const discountedPrice = (offer.price *
                (1 - offer.discountPercentage / 100)).toFixed(2);
            return `
      <div class="me-agent-offer-card" data-offer-code="${offer.offerCode}">
        <div class="me-agent-offer-image-container">
          <div class="me-agent-offer-image" style="background-image: url('${imageUrl}')"></div>
          <span class="me-agent-offer-badge">${offer.discountPercentage}% Off</span>
        </div>
        <div class="me-agent-offer-info">
          <h4 class="me-agent-offer-name">${offer.name}</h4>
          <div class="me-agent-offer-pricing">
            <span class="me-agent-offer-price">$${discountedPrice}</span>
            <span class="me-agent-offer-original-price">$${offer.price.toFixed(2)}</span>
          </div>
        </div>
      </div>
    `;
        }
        /**
         * Show loading state
         */
        showLoading(message = "Loading Offer...") {
            this.element.innerHTML = `
      <div class="me-agent-offers-header">
        <h3 class="me-agent-offers-title">${message}</h3>
        <button class="me-agent-offers-close" aria-label="Close offers">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
      <div class="me-agent-offers-loading">
        <div class="me-agent-loading">
          <div class="me-agent-loading-dot"></div>
          <div class="me-agent-loading-dot"></div>
          <div class="me-agent-loading-dot"></div>
        </div>
      </div>
    `;
            const closeBtn = this.element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", this.onClose);
        }
        /**
         * Render header with back button
         */
        renderHeader(backText = "Back") {
            return `
      <div class="me-agent-offers-header">
        <button class="me-agent-offers-back" aria-label="Back">
          ${getChevronLeftIcon({ width: 20, height: 20 })}
          <span>${backText}</span>
        </button>
        <button class="me-agent-offers-close" aria-label="Close">${getCloseIcon({ width: 20, height: 20 })}</button>
      </div>
    `;
        }
        /**
         * Show offer details
         */
        showDetail(detail) {
            var _a;
            this.currentView = "detail";
            this.currentOfferDetail = detail;
            // Auto-select first variant by default
            if (detail.offerVariants && detail.offerVariants.length > 0) {
                this.selectedVariant = detail.offerVariants[0];
            }
            const finalPrice = this.calculateFinalPrice(detail);
            const discountPercentage = detail.redemptionMethod.discountPercentage || "20";
            const isLiked = this.likedOffers[detail.id] || false;
            // Prepare images for carousel
            const images = ((_a = detail.offerImages) === null || _a === void 0 ? void 0 : _a.length) > 0
                ? detail.offerImages.map((img) => img.url)
                : [
                    detail.coverImage ||
                        "https://via.placeholder.com/600x400?text=No+Image",
                ];
            // Render variants if available
            const variantsHtml = this.renderVariantSelector(detail.offerVariants);
            // Action buttons
            const hasCallbacks = !!(this.config.onAddToCart ||
                this.config.onShare ||
                this.config.onLikeUnlike);
            const actionButtonsHtml = hasCallbacks
                ? `
      ${this.config.onAddToCart
                ? '<button class="me-agent-action-button me-agent-add-to-cart">Add To Cart</button>'
                : ""}
      ${this.config.onLikeUnlike
                ? `<button class="me-agent-action-icon ${isLiked ? "liked" : ""}" data-action="like">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="${isLiked ? "currentColor" : "none"}" stroke="currentColor" stroke-width="2">
          <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
        </svg>
      </button>`
                : ""}
      ${this.config.onShare
                ? `<button class="me-agent-action-icon" data-action="share">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8"></path>
          <polyline points="16 6 12 2 8 6"></polyline>
          <line x1="12" y1="2" x2="12" y2="15"></line>
        </svg>
      </button>`
                : ""}
    `
                : "";
            this.element.innerHTML = `
      ${this.renderHeader("Product details")}
      <div class="me-agent-offer-detail">
        <div class="me-agent-offer-detail-scroll">
          <!-- Image Carousel -->
          <div class="me-agent-image-carousel">
            ${images
            .map((img, i) => `
              <div class="me-agent-carousel-image ${i === 0 ? "active" : ""}" style="background-image: url('${img}')"></div>
            `)
            .join("")}
          </div>

          <!-- Product Info -->
          <div class="me-agent-detail-info">
            <h3 class="me-agent-detail-title">${detail.name}${this.selectedVariant ? ` - ${this.selectedVariant.variant.name}` : ""}</h3>
            
            <div class="me-agent-detail-pricing">
              <span class="me-agent-detail-price">$${finalPrice}</span>
              <span class="me-agent-detail-original-price">$${detail.originalPrice}</span>
            </div>

            <div class="me-agent-detail-badge">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
              </svg>
              ${discountPercentage}% Off With Coupon
            </div>

            <p class="me-agent-detail-shipping">Ships To Texas, United State Of America</p>

            ${variantsHtml}

            <!-- Quantity Selector -->
            <div class="me-agent-quantity-section">
              <label class="me-agent-section-label">Quantity</label>
              <div class="me-agent-quantity-selector">
                <button class="me-agent-quantity-btn" data-action="decrease">−</button>
                <input type="number" class="me-agent-quantity-input" value="0" min="0" />
                <button class="me-agent-quantity-btn" data-action="increase">+</button>
              </div>
            </div>

            <!-- Description & Reviews Tabs -->
            <div class="me-agent-tabs">
              <button class="me-agent-tab active" data-tab="description">Description</button>
              <button class="me-agent-tab" data-tab="reviews">Reviews</button>
            </div>

            <div class="me-agent-tab-content">
              <div class="me-agent-tab-pane active" data-pane="description">
                <p class="me-agent-description-text">${detail.description || "No description available"}</p>
              </div>
              <div class="me-agent-tab-pane" data-pane="reviews">
                ${this.renderReviews()}
              </div>
            </div>
          </div>

          <!-- Redemption Info -->
          <div class="me-agent-redemption-info">
            <p>Redeem this offer to get a unique coupon code, then enter the code on checkout and the discount will be applied to your total before payment.</p>
          </div>
        </div>

        <!-- Bottom Actions -->
        <div class="me-agent-detail-actions">
          <button class="me-agent-redeem-button">Redeem Offer</button>
          ${hasCallbacks
            ? `<div class="me-agent-secondary-actions">${actionButtonsHtml}</div>`
            : ""}
        </div>
      </div>
    `;
            this.setupDetailListeners();
        }
        /**
         * Render variant selector with images
         */
        renderVariantSelector(offerVariants) {
            if (!offerVariants || offerVariants.length === 0) {
                return "";
            }
            return `
      <div class="me-agent-variant-section">
        <label class="me-agent-section-label">Variant</label>
        <div class="me-agent-variant-grid">
          ${offerVariants
            .map((offerVariant, index) => {
            var _a, _b;
            const variant = offerVariant.variant;
            const image = ((_b = (_a = variant.productImages) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.url) ||
                "https://via.placeholder.com/80x80";
            const discountPct = offerVariant.discountPercentage || "0";
            const isOutOfStock = offerVariant.inventory <= 0;
            return `
              <button 
                class="me-agent-variant-card ${index === 0 ? "active" : ""} ${isOutOfStock ? "disabled" : ""}" 
                data-variant-index="${index}"
                ${isOutOfStock ? "disabled" : ""}
              >
                <div class="me-agent-variant-image" style="background-image: url('${image}')">
                  ${!isOutOfStock
                ? `<span class="me-agent-variant-discount">
                    <svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor">
                      <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5"/>
                    </svg>
                    ${discountPct}% Off
                  </span>`
                : ""}
                </div>
              </button>
            `;
        })
            .join("")}
        </div>
      </div>
    `;
        }
        /**
         * Render dummy reviews section
         */
        renderReviews() {
            const dummyReviews = [
                {
                    name: "John Doe",
                    rating: 4,
                    text: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat",
                },
                {
                    name: "Jane Smith",
                    rating: 5,
                    text: "Great product! Highly recommend. Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                },
                {
                    name: "Bob Johnson",
                    rating: 4,
                    text: "Good quality and fast shipping. Lorem ipsum dolor sit amet, consectetur adipiscing elit.",
                },
            ];
            const ratings = [
                { stars: 5, count: 20 },
                { stars: 4, count: 50 },
                { stars: 3, count: 20 },
                { stars: 2, count: 6 },
                { stars: 1, count: 4 },
            ];
            const totalReviews = ratings.reduce((sum, r) => sum + r.count, 0);
            const avgRating = (ratings.reduce((sum, r) => sum + r.stars * r.count, 0) / totalReviews).toFixed(1);
            return `
      <div class="me-agent-reviews">
        <div class="me-agent-reviews-summary">
          <div class="me-agent-reviews-bars">
            ${ratings
            .map((r) => `
              <div class="me-agent-rating-row">
                <div class="me-agent-stars-small">
                  ${Array(5)
            .fill(0)
            .map((_, i) => `<span class="${i < r.stars ? "filled" : ""}">★</span>`)
            .join("")}
                </div>
                <div class="me-agent-rating-bar">
                  <div class="me-agent-rating-fill" style="width: ${(r.count / totalReviews) * 100}%"></div>
                </div>
                <span class="me-agent-rating-count">${r.count}</span>
              </div>
            `)
            .join("")}
          </div>
          <div class="me-agent-reviews-score">
            <div class="me-agent-score-number">${avgRating} <span>/ 5</span></div>
            <div class="me-agent-stars-large">
              ${Array(5)
            .fill(0)
            .map((_, i) => `<span class="${i < Math.floor(parseFloat(avgRating)) ? "filled" : ""}">★</span>`)
            .join("")}
            </div>
            <div class="me-agent-review-count">${totalReviews} Reviews</div>
          </div>
        </div>

        <div class="me-agent-reviews-list">
          ${dummyReviews
            .map((review) => `
            <div class="me-agent-review-item">
              <div class="me-agent-review-header">
                <div class="me-agent-reviewer-avatar"></div>
                <div>
                  <div class="me-agent-reviewer-name">${review.name}</div>
                  <div class="me-agent-review-stars">
                    ${Array(5)
            .fill(0)
            .map((_, i) => `<span class="${i < review.rating ? "filled" : ""}">★</span>`)
            .join("")}
                  </div>
                </div>
              </div>
              <p class="me-agent-review-text">${review.text}</p>
            </div>
          `)
            .join("")}
        </div>
      </div>
    `;
        }
        /**
         * Setup detail page event listeners
         */
        setupDetailListeners() {
            // Back button
            const backBtn = this.element.querySelector(".me-agent-offers-back");
            backBtn === null || backBtn === void 0 ? void 0 : backBtn.addEventListener("click", () => this.showGrid(this.offers));
            // Close button
            const closeBtn = this.element.querySelector(".me-agent-offers-close");
            closeBtn === null || closeBtn === void 0 ? void 0 : closeBtn.addEventListener("click", this.onClose);
            // Redeem button
            const redeemBtn = this.element.querySelector(".me-agent-redeem-button");
            redeemBtn === null || redeemBtn === void 0 ? void 0 : redeemBtn.addEventListener("click", () => this.handleClaimOffer());
            // Quantity controls
            const quantityInput = this.element.querySelector(".me-agent-quantity-input");
            const decreaseBtn = this.element.querySelector('[data-action="decrease"]');
            const increaseBtn = this.element.querySelector('[data-action="increase"]');
            decreaseBtn === null || decreaseBtn === void 0 ? void 0 : decreaseBtn.addEventListener("click", () => {
                const val = parseInt(quantityInput.value || "0");
                if (val > 0)
                    quantityInput.value = String(val - 1);
            });
            increaseBtn === null || increaseBtn === void 0 ? void 0 : increaseBtn.addEventListener("click", () => {
                const val = parseInt(quantityInput.value || "0");
                quantityInput.value = String(val + 1);
            });
            // Tab switching
            const tabs = this.element.querySelectorAll(".me-agent-tab");
            const panes = this.element.querySelectorAll(".me-agent-tab-pane");
            tabs.forEach((tab) => {
                tab.addEventListener("click", () => {
                    const tabName = tab.getAttribute("data-tab");
                    tabs.forEach((t) => t.classList.remove("active"));
                    panes.forEach((p) => p.classList.remove("active"));
                    tab.classList.add("active");
                    const activePane = this.element.querySelector(`[data-pane="${tabName}"]`);
                    activePane === null || activePane === void 0 ? void 0 : activePane.classList.add("active");
                });
            });
            // Variant selection
            const variantCards = this.element.querySelectorAll(".me-agent-variant-card");
            variantCards.forEach((card, index) => {
                card.addEventListener("click", () => {
                    var _a;
                    variantCards.forEach((c) => c.classList.remove("active"));
                    card.classList.add("active");
                    if ((_a = this.currentOfferDetail) === null || _a === void 0 ? void 0 : _a.offerVariants) {
                        this.selectedVariant = this.currentOfferDetail.offerVariants[index];
                    }
                });
            });
            // Action buttons
            if (this.config.onAddToCart && this.currentOfferDetail) {
                const addToCartBtn = this.element.querySelector(".me-agent-add-to-cart");
                addToCartBtn === null || addToCartBtn === void 0 ? void 0 : addToCartBtn.addEventListener("click", () => {
                    if (this.currentOfferDetail && this.config.onAddToCart) {
                        this.config.onAddToCart(this.currentOfferDetail);
                    }
                });
            }
            if (this.config.onShare && this.currentOfferDetail) {
                const shareBtn = this.element.querySelector('[data-action="share"]');
                shareBtn === null || shareBtn === void 0 ? void 0 : shareBtn.addEventListener("click", () => {
                    if (this.currentOfferDetail && this.config.onShare) {
                        this.config.onShare(this.currentOfferDetail);
                    }
                });
            }
            if (this.config.onLikeUnlike && this.currentOfferDetail) {
                const likeBtn = this.element.querySelector('[data-action="like"]');
                likeBtn === null || likeBtn === void 0 ? void 0 : likeBtn.addEventListener("click", () => {
                    if (this.currentOfferDetail && this.config.onLikeUnlike) {
                        const isLiked = !this.likedOffers[this.currentOfferDetail.id];
                        this.likedOffers[this.currentOfferDetail.id] = isLiked;
                        likeBtn.classList.toggle("liked", isLiked);
                        this.config.onLikeUnlike(this.currentOfferDetail, isLiked);
                    }
                });
            }
        }
        /**
         * Setup variant selection listeners
         */
        setupVariantListeners() {
            var _a;
            if (!((_a = this.currentOfferDetail) === null || _a === void 0 ? void 0 : _a.offerVariants))
                return;
            const variantButtons = this.element.querySelectorAll(".me-agent-variant-chip");
            variantButtons.forEach((btn) => {
                btn.addEventListener("click", (e) => {
                    var _a;
                    const target = e.currentTarget;
                    const index = parseInt(target.getAttribute("data-variant-index") || "0");
                    // Update active state
                    variantButtons.forEach((b) => b.classList.remove("active"));
                    target.classList.add("active");
                    // Update selected variant
                    if ((_a = this.currentOfferDetail) === null || _a === void 0 ? void 0 : _a.offerVariants) {
                        this.selectedVariant = this.currentOfferDetail.offerVariants[index];
                    }
                });
            });
        }
        /**
         * Calculate final price
         */
        calculateFinalPrice(detail) {
            const original = parseFloat(detail.originalPrice);
            if (detail.redemptionMethod.discountPercentage) {
                const discount = parseFloat(detail.redemptionMethod.discountPercentage);
                return (original * (1 - discount / 100)).toFixed(2);
            }
            else if (detail.redemptionMethod.discountAmount) {
                const discount = parseFloat(detail.redemptionMethod.discountAmount);
                return (original - discount).toFixed(2);
            }
            return original.toFixed(2);
        }
        /**
         * Handle claim offer button click
         */
        handleClaimOffer() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.redeemManager || !this.redeemManager.isMagicConfigured()) {
                    alert("Redemption is not configured. Please contact support.");
                    return;
                }
                if (!this.currentOfferDetail) {
                    return;
                }
                // Show loading on the claim button
                const claimBtn = this.element.querySelector(".me-agent-offer-claim-button");
                if (claimBtn) {
                    claimBtn.disabled = true;
                    claimBtn.textContent = "Processing...";
                }
                try {
                    // Update Magic with brand's network if needed
                    if (this.currentOfferDetail.brand.network) {
                        yield this.redeemManager.updateNetwork(this.currentOfferDetail.brand.network);
                    }
                    // Proceed to authentication check (variant already selected from horizontal list)
                    yield this.proceedToAuthentication();
                }
                catch (error) {
                    console.error("Error handling claim offer:", error);
                    alert("Failed to process claim. Please try again.");
                    // Reset button state on error
                    if (claimBtn) {
                        claimBtn.disabled = false;
                        claimBtn.textContent = "Claim Offer";
                    }
                }
            });
        }
        /**
         * Proceed to authentication check
         */
        proceedToAuthentication() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.redeemManager)
                    return;
                try {
                    // Check if user is already authenticated
                    const isAuthenticated = yield this.redeemManager.isAuthenticated();
                    if (isAuthenticated) {
                        // Already authenticated with Magic, check ME Protocol onboarding
                        yield this.checkAndHandleOnboarding();
                    }
                    else {
                        // Show OTP verification view
                        this.showOTPView();
                    }
                }
                catch (error) {
                    console.error("Error in authentication:", error);
                    alert("Failed to verify authentication. Please try again.");
                }
            });
        }
        /**
         * Check ME Protocol login and handle accordingly
         */
        checkAndHandleOnboarding() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.redeemManager) {
                    return;
                }
                try {
                    // Clear any cached wallet address to force refresh from Magic
                    this.redeemManager.clearWalletAddressCache();
                    // Check if already logged in to ME Protocol
                    if (this.redeemManager.isMEProtocolLoggedIn()) {
                        // Already logged in, proceed to reward selection
                        yield this.fetchAndShowRewardSelection();
                        return;
                    }
                    // Show loading view and login to ME Protocol
                    yield this.showAndExecuteLogin();
                }
                catch (error) {
                    console.error("Error in ME Protocol login:", error);
                    alert("Failed to authenticate. Please try again.");
                    if (this.currentOfferDetail) {
                        this.showDetail(this.currentOfferDetail);
                    }
                }
            });
        }
        /**
         * Show loading view and execute ME Protocol login
         */
        showAndExecuteLogin() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.redeemManager) {
                    return;
                }
                this.currentView = "onboarding";
                this.element.innerHTML = OnboardingView.render();
                // Start login process (creates account if new user)
                yield OnboardingView.startOnboarding(this.element, this.redeemManager, () => {
                    // Login successful, proceed to reward selection
                    this.fetchAndShowRewardSelection();
                }, (error) => {
                    // Login failed
                    alert(error);
                    if (this.currentOfferDetail) {
                        this.showDetail(this.currentOfferDetail);
                    }
                });
            });
        }
        /**
         * Show OTP verification view
         */
        showOTPView() {
            return __awaiter(this, void 0, void 0, function* () {
                this.currentView = "otp-verify";
                if (!this.redeemManager)
                    return;
                const email = this.redeemManager.getEmail();
                let autoSendOTP = false;
                // Show loading while sending OTP
                if (email) {
                    this.showLoading("Sending verification code...");
                    try {
                        yield this.redeemManager.sendOTP(email);
                        autoSendOTP = true;
                    }
                    catch (error) {
                        console.error("Error auto-sending OTP:", error);
                        // If auto-send fails, show the form
                        autoSendOTP = false;
                    }
                }
                this.element.innerHTML = OTPView.render(() => {
                    if (this.currentOfferDetail) {
                        this.showDetail(this.currentOfferDetail);
                    }
                }, this.onClose, () => this.checkAndHandleOnboarding(), // Check onboarding after OTP success
                this.redeemManager, autoSendOTP);
                OTPView.setupListeners(this.element, () => {
                    if (this.currentOfferDetail) {
                        this.showDetail(this.currentOfferDetail);
                    }
                }, this.onClose, () => this.checkAndHandleOnboarding(), // Check onboarding after OTP success
                this.redeemManager, autoSendOTP);
            });
        }
        /**
         * Fetch balances and show reward selection
         */
        fetchAndShowRewardSelection() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.redeemManager) {
                    return;
                }
                try {
                    this.showLoading();
                    const balances = yield this.redeemManager.fetchBalances();
                    if (balances.length === 0) {
                        alert("You don't have any rewards yet. Please earn rewards first.");
                        if (this.currentOfferDetail) {
                            this.showDetail(this.currentOfferDetail);
                        }
                        return;
                    }
                    this.showRewardSelection(balances);
                }
                catch (error) {
                    console.error("Error fetching balances:", error);
                    alert("Failed to fetch your rewards. Please try again.");
                    if (this.currentOfferDetail) {
                        this.showDetail(this.currentOfferDetail);
                    }
                }
            });
        }
        /**
         * Show reward selection view
         */
        showRewardSelection(balances) {
            this.currentView = "reward-select";
            this.element.innerHTML = RewardSelectionView.render(balances);
            RewardSelectionView.setupListeners(this.element, balances, () => {
                if (this.currentOfferDetail) {
                    this.showDetail(this.currentOfferDetail);
                }
            }, this.onClose, (reward) => this.handleRewardSelect(reward));
        }
        /**
         * Handle reward selection
         */
        handleRewardSelect(reward) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a;
                if (!this.redeemManager || !this.currentOfferDetail) {
                    return;
                }
                this.selectedReward = reward;
                try {
                    this.showLoading();
                    // Calculate swap amount with selected variant
                    const swapAmount = yield this.redeemManager.calculateSwapAmount(reward.reward.contractAddress, this.currentOfferDetail, (_a = this.selectedVariant) === null || _a === void 0 ? void 0 : _a.id);
                    this.swapAmount = swapAmount;
                    // Check affordability
                    const canAfford = this.redeemManager.canAffordOffer(reward, swapAmount.amountNeeded);
                    if (!canAfford) {
                        this.showAffordabilityError(reward, swapAmount.amountNeeded);
                    }
                    else {
                        this.showConfirmation(reward, swapAmount);
                    }
                }
                catch (error) {
                    console.error("Error calculating swap amount:", error);
                    alert("Failed to calculate redemption amount. Please try again.");
                    this.fetchAndShowRewardSelection();
                }
            });
        }
        /**
         * Show affordability error
         */
        showAffordabilityError(reward, amountNeeded) {
            this.element.innerHTML = AffordabilityErrorView.render(reward, amountNeeded);
            AffordabilityErrorView.setupListeners(this.element, () => this.fetchAndShowRewardSelection(), this.onClose);
        }
        /**
         * Show confirmation view
         */
        showConfirmation(reward, swapAmount) {
            if (!this.currentOfferDetail)
                return;
            this.currentView = "confirm";
            this.element.innerHTML = ConfirmationView.render(reward, swapAmount, this.currentOfferDetail);
            ConfirmationView.setupListeners(this.element, () => this.fetchAndShowRewardSelection(), this.onClose, () => __awaiter(this, void 0, void 0, function* () {
                // Execute blockchain redemption transaction
                // This will be implemented when transaction logic is added
                alert("Redemption confirmed! Processing transaction...");
                this.onClose();
            }));
        }
        /**
         * Get the panel element
         */
        getElement() {
            return this.element;
        }
        /**
         * Show the panel
         */
        show() {
            this.element.classList.add("visible");
        }
        /**
         * Hide the panel
         */
        hide() {
            this.element.classList.remove("visible");
        }
    }

    /**
     * Chat Popup Component
     */
    class ChatPopup {
        constructor(position, onSendMessage, onClose, apiClient, sessionId, config, redeemManager) {
            this.welcomeElement = null;
            this.isMaximized = false;
            this.detailPanel = null;
            this.currentOffers = [];
            this.sessionId = "";
            this.redeemManager = null;
            this.position = position;
            this.onSendMessage = onSendMessage;
            this.onClose = onClose;
            this.apiClient = apiClient;
            this.sessionId = sessionId;
            this.config = config;
            this.redeemManager = redeemManager || null;
            this.element = this.create();
            this.messagesContainer = this.element.querySelector(".me-agent-messages");
            this.inputElement = this.element.querySelector(".me-agent-input");
            this.sendButton = this.element.querySelector(".me-agent-send-button");
            this.maximizeButton = this.element.querySelector(".me-agent-maximize-button");
            // Initialize detail panel
            this.detailPanel = new DetailPanel(() => this.hideDetailPanel(), (offerCode) => this.handleOfferClick(offerCode), config, this.apiClient, this.redeemManager || undefined);
            // Mount detail panel inside chat
            const detailWrapper = this.element.querySelector(".me-agent-detail-panel-wrapper");
            detailWrapper.appendChild(this.detailPanel.getElement());
            this.setupEventListeners();
        }
        /**
         * Create the chat popup element
         */
        create() {
            const chat = document.createElement("div");
            chat.className = `me-agent-chat ${this.position}`;
            chat.innerHTML = `
      <div class="me-agent-chat-content">
        <div class="me-agent-chat-header">
          <div class="me-agent-chat-title-container">
            ${getChatIcon({
            width: 20,
            height: 20,
            className: "me-agent-chat-icon",
            color: "#999999",
        })}
            <h3 class="me-agent-chat-title">Chats</h3>
          </div>
          <div class="me-agent-header-buttons">
            <button class="me-agent-maximize-button" aria-label="Maximize chat">
              <span class="me-agent-maximize-icon">${getMaximizeIcon({
            width: 16,
            height: 16,
        })}</span>
              <span class="me-agent-minimize-icon" style="display:none;">${getMinimizeIcon({ width: 16, height: 16 })}</span>
            </button>
            <button class="me-agent-close-button" aria-label="Close chat">${getCloseIcon({ width: 20, height: 20 })}</button>
          </div>
        </div>
        <div class="me-agent-messages"></div>
        <div class="me-agent-input-container">
          <div class="me-agent-input-content">
            <input 
              type="text" 
              class="me-agent-input" 
              placeholder="Ask or search anything..."
              aria-label="Message input"
            />
            <button class="me-agent-send-button" aria-label="Send message">${getSendIcon({ width: 18, height: 18 })}</button>
          </div>
        </div>
      </div>
      <div class="me-agent-detail-panel-wrapper"></div>
    `;
            return chat;
        }
        /**
         * Setup event listeners
         */
        setupEventListeners() {
            // Close button
            const closeButton = this.element.querySelector(".me-agent-close-button");
            closeButton === null || closeButton === void 0 ? void 0 : closeButton.addEventListener("click", this.onClose);
            // Maximize button
            this.maximizeButton.addEventListener("click", () => this.toggleMaximize());
            // Send button
            this.sendButton.addEventListener("click", () => this.handleSend());
            // Enter key to send
            this.inputElement.addEventListener("keypress", (e) => {
                if (e.key === "Enter" && !e.shiftKey) {
                    e.preventDefault();
                    this.handleSend();
                }
            });
            // Monitor input changes to enable/disable send button
            this.inputElement.addEventListener("input", () => {
                this.updateSendButtonState();
            });
            // Set initial send button state
            this.updateSendButtonState();
        }
        /**
         * Update send button state based on input value
         */
        updateSendButtonState() {
            const hasText = this.inputElement.value.trim().length > 0;
            this.sendButton.disabled = !hasText;
        }
        /**
         * Handle send message
         */
        handleSend() {
            const message = this.inputElement.value.trim();
            if (message) {
                this.hideWelcome(); // Remove quick actions when user sends a message
                this.onSendMessage(message);
                this.inputElement.value = "";
                this.updateSendButtonState(); // Disable button after clearing input
            }
        }
        /**
         * Show welcome message with quick actions
         */
        showWelcome() {
            this.welcomeElement = document.createElement("div");
            this.welcomeElement.className =
                "me-agent-message assistant me-agent-welcome-message";
            const quickActions = [
                {
                    id: "search",
                    label: "Search for an offer",
                    value: "Search for an offer",
                    icon: "search",
                },
                {
                    id: "offers",
                    label: "Earn a reward",
                    value: "Earn a reward",
                    icon: "offers",
                },
                { id: "rewards", label: "My rewards", value: "My rewards", icon: "tags" },
            ];
            // Avatar
            const avatarDiv = document.createElement("div");
            avatarDiv.className = "me-agent-message-avatar-wrapper";
            avatarDiv.innerHTML = getAssistantAvatarIcon({
                width: 32,
                height: 32,
                className: "me-agent-message-avatar",
            });
            // Content wrapper
            const contentWrapper = document.createElement("div");
            contentWrapper.className = "me-agent-message-content-wrapper";
            // Message content
            const contentDiv = document.createElement("div");
            contentDiv.className = "me-agent-message-content";
            contentDiv.innerHTML = `
      <div>👋</div>
      <div>Hi there! Welcome, I am Meely. How would you like me to help you today?</div>
    `;
            // Quick actions
            const actionsContainer = QuickActionsComponent.create(quickActions, (action) => {
                // Hide only the quick actions, not the entire message
                actionsContainer.remove();
                this.onSendMessage(action.value);
            });
            contentWrapper.appendChild(contentDiv);
            contentWrapper.appendChild(actionsContainer);
            this.welcomeElement.appendChild(avatarDiv);
            this.welcomeElement.appendChild(contentWrapper);
            this.messagesContainer.appendChild(this.welcomeElement);
        }
        /**
         * Hide welcome message (but keep the message, just remove quick actions)
         */
        hideWelcome() {
            if (this.welcomeElement) {
                // Just hide the quick actions, keep the welcome message visible
                const actionsContainer = this.welcomeElement.querySelector(".me-agent-quick-actions");
                if (actionsContainer) {
                    actionsContainer.remove();
                }
            }
        }
        /**
         * Add a message to the chat
         */
        addMessage(message) {
            const messageElement = MessageComponent.create(message, (offerCode) => {
                this.handleOfferClick(offerCode);
            });
            this.messagesContainer.appendChild(messageElement);
            this.scrollToBottom();
        }
        /**
         * Show loading indicator
         */
        showLoading() {
            const loadingElement = MessageComponent.createLoading();
            this.messagesContainer.appendChild(loadingElement);
            this.scrollToBottom();
            return loadingElement;
        }
        /**
         * Remove loading indicator
         */
        removeLoading() {
            const loadingElement = this.messagesContainer.querySelector('[data-loading="true"]');
            if (loadingElement) {
                loadingElement.remove();
            }
        }
        /**
         * Update last message content (for streaming)
         */
        updateLastMessage(content) {
            const messages = this.messagesContainer.querySelectorAll(".me-agent-message.assistant");
            const lastMessage = messages[messages.length - 1];
            if (lastMessage) {
                MessageComponent.updateContent(lastMessage, content, (offerCode) => {
                    this.handleOfferClick(offerCode);
                });
                this.scrollToBottom();
            }
        }
        /**
         * Scroll to bottom of messages
         */
        scrollToBottom() {
            this.messagesContainer.scrollTop = this.messagesContainer.scrollHeight;
        }
        /**
         * Toggle maximize/minimize
         */
        toggleMaximize() {
            this.isMaximized = !this.isMaximized;
            if (this.isMaximized) {
                // Maximizing
                this.element.classList.add("maximized");
                const maximizeIcon = this.maximizeButton.querySelector(".me-agent-maximize-icon");
                const minimizeIcon = this.maximizeButton.querySelector(".me-agent-minimize-icon");
                maximizeIcon.style.display = "none";
                minimizeIcon.style.display = "block";
                this.maximizeButton.setAttribute("aria-label", "Restore chat");
                // Scroll to bottom after animation
                setTimeout(() => this.scrollToBottom(), 300);
            }
            else {
                // Minimizing - hide detail panel first
                this.hideDetailPanel();
                // Trigger slide out animation
                this.element.classList.add("minimizing");
                const maximizeIcon = this.maximizeButton.querySelector(".me-agent-maximize-icon");
                const minimizeIcon = this.maximizeButton.querySelector(".me-agent-minimize-icon");
                // Wait for slide out animation to complete
                setTimeout(() => {
                    // Remove maximized state and minimizing class
                    this.element.classList.remove("maximized");
                    this.element.classList.remove("minimizing");
                    // Temporarily remove visible class to prepare for slide-in animation
                    this.element.classList.remove("visible");
                    // Update icons
                    maximizeIcon.style.display = "block";
                    minimizeIcon.style.display = "none";
                    this.maximizeButton.setAttribute("aria-label", "Maximize chat");
                    // Trigger slide-in animation from bottom
                    setTimeout(() => {
                        this.element.classList.add("visible");
                        setTimeout(() => this.scrollToBottom(), 100);
                    }, 50);
                }, 300);
            }
        }
        /**
         * Show the chat popup
         */
        show() {
            this.element.classList.add("visible");
            this.inputElement.focus();
        }
        /**
         * Hide the chat popup
         */
        hide() {
            this.element.classList.remove("visible");
            this.hideDetailPanel(); // Hide detail panel when closing chat
            if (this.isMaximized) {
                this.toggleMaximize(); // Reset to normal size when closing
            }
        }
        /**
         * Set loading state for input
         */
        setLoading(loading) {
            this.inputElement.disabled = loading;
            this.sendButton.disabled = loading;
        }
        /**
         * Clear all messages
         */
        clearMessages() {
            this.messagesContainer.innerHTML = "";
            this.showWelcome();
        }
        /**
         * Show offer preview card - appends to the last assistant message
         */
        showOfferPreview(offers) {
            // Create preview card with its own offers bound to the click handler
            const previewCard = OfferPreviewCard.create(offers, () => this.showDetailPanel(offers));
            // Find the last assistant message and append the card to its content wrapper
            const messages = this.messagesContainer.querySelectorAll(".me-agent-message.assistant");
            const lastMessage = messages[messages.length - 1];
            if (lastMessage) {
                MessageComponent.appendToMessage(lastMessage, previewCard);
            }
            else {
                // Fallback: append to messages container if no assistant message found
                this.messagesContainer.appendChild(previewCard);
            }
            this.scrollToBottom();
        }
        /**
         * Show brand preview card - appends to the last assistant message
         */
        showBrandPreview(brands) {
            // Convert brands to CardListItem format
            const brandItems = brands.slice(0, 10).map((brand) => ({
                id: brand.id,
                title: brand.name,
                image: brand.logoUrl ||
                    `https://via.placeholder.com/40x40?text=${brand.name.charAt(0)}`,
            }));
            // Create card list
            const brandCard = CardList.create({
                title: "List of brands that offer sign up rewards",
                items: brandItems,
                actionLabel: "View All",
                onAction: () => this.showBrandsDetail(brands),
            });
            // Find the last assistant message and append the card to its content wrapper
            const messages = this.messagesContainer.querySelectorAll(".me-agent-message.assistant");
            const lastMessage = messages[messages.length - 1];
            if (lastMessage) {
                MessageComponent.appendToMessage(lastMessage, brandCard);
            }
            else {
                // Fallback: append to messages container if no assistant message found
                this.messagesContainer.appendChild(brandCard);
            }
            this.scrollToBottom();
        }
        /**
         * Show brands detail panel with full list
         */
        showBrandsDetail(brands) {
            var _a;
            if (this.isMaximized) {
                (_a = this.detailPanel) === null || _a === void 0 ? void 0 : _a.showBrandsDetail(brands);
                this.element.classList.add("has-detail-panel");
            }
            else {
                this.toggleMaximize();
                // Wait for maximize animation
                setTimeout(() => {
                    var _a;
                    (_a = this.detailPanel) === null || _a === void 0 ? void 0 : _a.showBrandsDetail(brands);
                    this.element.classList.add("has-detail-panel");
                }, 300);
            }
        }
        /**
         * Show category preview with card list
         */
        showCategoryPreview(categories) {
            const categoryItems = categories
                .slice(0, 10)
                .map((category) => ({
                id: category.categoryId,
                title: category.title || category.categoryName,
                image: category.image ||
                    `https://via.placeholder.com/40x40?text=${(category.title || category.categoryName).charAt(0)}`,
            }));
            const categoryCard = CardList.create({
                title: "List of category that offer purchase rewards",
                items: categoryItems,
                actionLabel: "View All",
                onAction: () => this.showCategoriesDetail(categories),
            });
            const messages = this.messagesContainer.querySelectorAll(".me-agent-message.assistant");
            const lastMessage = messages[messages.length - 1];
            if (lastMessage) {
                MessageComponent.appendToMessage(lastMessage, categoryCard);
            }
            else {
                this.messagesContainer.appendChild(categoryCard);
            }
            this.scrollToBottom();
        }
        /**
         * Show categories detail panel with grid
         */
        showCategoriesDetail(categories) {
            var _a;
            if (this.isMaximized) {
                (_a = this.detailPanel) === null || _a === void 0 ? void 0 : _a.showCategoriesDetail(categories);
                this.element.classList.add("has-detail-panel");
            }
            else {
                this.toggleMaximize();
                // Wait for maximize animation
                setTimeout(() => {
                    var _a;
                    (_a = this.detailPanel) === null || _a === void 0 ? void 0 : _a.showCategoriesDetail(categories);
                    this.element.classList.add("has-detail-panel");
                }, 300);
            }
        }
        /**
         * Show ways to earn quick actions
         */
        showWaysToEarnActions() {
            const actions = [
                {
                    id: "sign_up_brand",
                    label: "Sign up for a brand",
                    value: "Sign up for a brand",
                    icon: "user",
                },
                {
                    id: "purchase_brand",
                    label: "Purchase from a brand",
                    value: "Purchase from a brand",
                    icon: "money",
                },
            ];
            const quickActionsElement = QuickActionsComponent.create(actions, (action) => {
                // Send the action label as a message
                this.onSendMessage(action.label);
            });
            // Find the last assistant message and append the quick actions
            const messages = this.messagesContainer.querySelectorAll(".me-agent-message.assistant");
            const lastMessage = messages[messages.length - 1];
            if (lastMessage) {
                MessageComponent.appendToMessage(lastMessage, quickActionsElement);
            }
            else {
                // Fallback: append to messages container if no assistant message found
                this.messagesContainer.appendChild(quickActionsElement);
            }
            this.scrollToBottom();
        }
        /**
         * Show detail panel with offers
         */
        showDetailPanel(offers) {
            var _a, _b;
            // Store the offers that are being displayed
            this.currentOffers = offers;
            // Auto-maximize when showing offers
            if (!this.isMaximized) {
                this.toggleMaximize();
            }
            this.element.classList.add("has-detail-panel");
            (_a = this.detailPanel) === null || _a === void 0 ? void 0 : _a.showGrid(offers);
            (_b = this.detailPanel) === null || _b === void 0 ? void 0 : _b.show();
        }
        /**
         * Hide detail panel
         */
        hideDetailPanel() {
            var _a;
            this.element.classList.remove("has-detail-panel");
            (_a = this.detailPanel) === null || _a === void 0 ? void 0 : _a.hide();
        }
        /**
         * Handle offer click
         */
        handleOfferClick(offerCode) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                try {
                    // Maximize widget if not already maximized
                    if (!this.isMaximized) {
                        this.toggleMaximize();
                    }
                    // Show the detail panel
                    this.element.classList.add("has-detail-panel");
                    (_a = this.detailPanel) === null || _a === void 0 ? void 0 : _a.show();
                    // Fetch and display offer details
                    (_b = this.detailPanel) === null || _b === void 0 ? void 0 : _b.showLoading();
                    const offerDetail = yield this.apiClient.fetchOfferDetails(offerCode, this.sessionId);
                    (_c = this.detailPanel) === null || _c === void 0 ? void 0 : _c.showDetail(offerDetail);
                }
                catch (error) {
                    console.error("Error fetching offer details:", error);
                    alert("Failed to load offer details. Please try again.");
                }
            });
        }
        /**
         * Mount the chat to the DOM
         */
        mount() {
            document.body.appendChild(this.element);
        }
        /**
         * Remove the chat from the DOM
         */
        unmount() {
            this.element.remove();
        }
        /**
         * Get the chat element
         */
        getElement() {
            return this.element;
        }
    }

    /**
     * Styles - Scoped CSS for SDK components
     */
    const styles = `
  /* Import Clash Display font */
  @import url('https://fonts.googleapis.com/css2?family=Clash+Display:wght@400;500;600;700&display=swap');

  /* Container for all SDK elements */
  .me-agent-container * {
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen', 'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
  }

  /* Floating Button */
  .me-agent-button {
    position: fixed;
    bottom: 24px;
    width: 64px;
    height: 64px;
    border-radius: 50%;
    background: #0F0F0F;
    outline: 1px #4D4D4D solid;
    cursor: pointer;
    box-shadow: 0px 16px 40px rgba(255, 255, 255, 0.24);
    z-index: 999999;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .me-agent-button:hover {
    transform: scale(1.05);
    box-shadow: 0px 16px 40px rgba(255, 255, 255, 0.24);
  }

  .me-agent-button.bottom-right {
    right: 24px;
  }

  .me-agent-button.bottom-left {
    left: 24px;
  }

  /* Hidden state for button when chat is open */
  .me-agent-button.hidden {
    opacity: 0;
    transform: translateY(100px);
    pointer-events: none;
  }

  .me-agent-button-icon {
    display: block;
  }

  /* Chat Container */
  .me-agent-chat {
    position: fixed;
    bottom: 20px;
    width: 672px;
    height: 602px;
    background: rgba(250, 250, 250, 0.8);
    outline: 1px #E6E6E6 solid;
    border-radius: 16px;
    box-shadow: 0px 24px 40px rgba(0, 0, 0, 0.08);
    z-index: 999999;
    display: flex;
    flex-direction: row;
    overflow: hidden;
    opacity: 0;
    transform: translateY(20px);
    pointer-events: none;
    transition: opacity 0.3s ease, transform 0.3s ease;
    backdrop-filter: blur(32px);
  }

  .me-agent-chat.visible {
    opacity: 1;
    transform: translateY(0);
    pointer-events: auto;
  }

  .me-agent-chat.bottom-right {
    right: 24px;
  }

  .me-agent-chat.bottom-left {
    left: 24px;
  }

  /* Chat Content (left side) */
  .me-agent-chat-content {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
  }

  /* Detail Panel Wrapper (right side) */
  .me-agent-detail-panel-wrapper {
    width: 0;
    height: 100%;
    overflow: hidden;
    transition: width 0.3s ease;
  }

  .me-agent-chat.has-detail-panel .me-agent-detail-panel-wrapper {
    width: 672px;
    border-left: 1px solid #999999;
  }

  /* Maximized State */
  .me-agent-chat.maximized {
    width: 672px !important;
    height: 100vh !important;
    top: 0 !important;
    bottom: 0 !important;
    right: 0 !important;
    left: auto !important;
    border-radius: 0;
    animation: slideInFromRight 0.3s ease;
  }

  /* Maximized with detail panel */
  .me-agent-chat.maximized.has-detail-panel {
    width: 1272px !important;
  }

  .me-agent-chat.minimizing {
    animation: slideOutToRight 0.3s ease;
  }

  @keyframes slideInFromRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideOutToRight {
    from {
      transform: translateX(0);
      opacity: 1;
    }
    to {
      transform: translateX(100%);
      opacity: 0;
    }
  }

  /* Chat Header */
  .me-agent-chat-header {
    padding: 20px;
    background: transparent;
    color: #0F0F0F;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  .me-agent-chat-title-container {
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .me-agent-chat-title {
    font-size: 16px;
    font-weight: 600;
    margin: 0;
  }

  .me-agent-header-buttons {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .me-agent-maximize-button,
  .me-agent-close-button {
    background: white;
    border: none;
    color: #000000;
    cursor: pointer;
    padding: 0;
    width: 32px;
    height: 32px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background 0.2s ease;
  }

  .me-agent-maximize-button {
    font-size: 16px;
  }

  .me-agent-maximize-button svg,
  .me-agent-close-button svg {
    display: block;
  }

  .me-agent-close-button {
    font-size: 24px;
  }

  .me-agent-maximize-button:hover,
  .me-agent-close-button:hover {
    background: rgba(255, 255, 255, 0.5);
  }

  /* Messages Container */
  .me-agent-messages {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 12px;
    background: transparent;
  }

  /* Welcome Message */
  .me-agent-welcome {
    text-align: center;
    padding: 20px 0;
  }

  .me-agent-welcome-title {
    font-size: 20px;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 20px 0;
  }

  /* Quick Actions */
  .me-agent-quick-actions {
    display: flex;
    flex-direction: column;
    gap: 10px;
    margin-top: 10px;
  }

  .me-agent-quick-action {
    background: white;
    border: 1px solid #e5e7eb;
    padding: 12px 16px;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
    color: #374151;
    text-align: left;
  }

  .me-agent-quick-action:hover {
    background: #f3f4f6;
    border-color: #667eea;
    transform: translateX(2px);
  }

  /* Message Bubble */
  .me-agent-message {
    display: flex;
    gap: 10px;
    animation: slideIn 0.3s ease;
    margin-bottom: 16px;
  }

  @keyframes slideIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .me-agent-message.user {
    flex-direction: row-reverse;
  }

  /* Avatar */
  .me-agent-message-avatar-wrapper {
    flex-shrink: 0;
    width: 32px;
    height: 32px;
  }

  .me-agent-message-avatar {
    width: 100%;
    height: 100%;
    display: block;
  }

  /* Content Wrapper */
  .me-agent-message-content-wrapper {
    display: flex;
    flex-direction: column;
    gap: 8px;
    flex: 1;
    min-width: 0;
  }

  .me-agent-message-content {
    max-width: 400px;
    width: fit-content;
    padding: 12px 16px;
    border-radius: 16px;
    font-size: 16px;
    line-height: 1.5;
    word-wrap: break-word;
    word-break: break-word;
  }

  .me-agent-message.user .me-agent-message-content {
    background: #000000;
    color: white;
    border-top-right-radius: 0px;
    margin-left: auto;
  }

  .me-agent-message.assistant .me-agent-message-content {
    background: white;
    color: #1f2937;
    border-top-left-radius: 0px;
  }

  /* Links in message content */
  .me-agent-message-content a {
    color: #999999;
    text-decoration: none;
    font-weight: 500;
    transition: color 0.2s ease;
  }

  .me-agent-message-content a:hover {
    color: #000000;
    text-decoration: underline;
  }

  /* Offer links - special styling */
  .me-agent-message-content .me-agent-offer-link {
    color: #999999;
    font-weight: 600;
    cursor: pointer;
    border-bottom: 1px dashed #999999;
    padding-bottom: 1px;
  }

  .me-agent-message-content .me-agent-offer-link:hover {
    color: #999999;
    border-bottom-color: #999999;
    text-decoration: none;
  }

  /* Bold and italic text */
  .me-agent-message-content strong {
    font-weight: 600;
  }

  .me-agent-message-content em {
    font-style: italic;
  }

  /* Quick Actions */
  .me-agent-quick-actions {
    display: flex;
    flex-direction: column;
    gap: 8px;
    align-items: flex-start;
  }

  .me-agent-quick-action-button {
    display: inline-flex;
    align-items: center;
    gap: 8px;
    background: none;
    border-radius: 10px;
    font-size: 14px;
    font-weight: 500;
    color: #1f2937;
    cursor: pointer;
    transition: all 0.2s ease;
    text-align: left;
    border: none;
    padding: 8px 0px;
    white-space: nowrap;
  }

  .me-agent-quick-action-button:hover {
    transform: translateX(5px);
  }

  .me-agent-quick-action-icon {
    flex-shrink: 0;
    color: #999999;
  }

  .me-agent-quick-action-text {
    flex-shrink: 0;
  }

  /* Welcome Message Specific Styles */
  .me-agent-welcome-message .me-agent-message-content {
    max-width: 400px;
    line-height: 1.6;
  }

  .me-agent-welcome-message .me-agent-message-content > div {
    margin-bottom: 4px;
  }

  .me-agent-welcome-message .me-agent-message-content > div:first-child {
    font-size: 20px;
    margin-bottom: 8px;
  }

  /* Input Container */
  .me-agent-input-container {
    padding: 20px;
  }

  .me-agent-input-content {
    padding: 16px 20px;
    background: white;
    display: flex;
    align-items: center;
    gap: 8px;
    border-radius: 16px;
  }

  .me-agent-input {
    flex: 1;
    padding: 12px 2px;
    font-size: 16px;
    outline: none;
    border: none;
  }

  .me-agent-send-button {
    width: 32px;
    height: 32px;
    background: #000000;
    color: white;
    border: none;
    border-radius: 100px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: transform 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .me-agent-send-button svg {
    display: block;
  }

  .me-agent-send-button:hover:not(:disabled) {
    transform: scale(1.02);
  }

  .me-agent-send-button:disabled {
    opacity: 0.3;
    cursor: not-allowed;
  }

  .me-agent-send-button:hover:not(:disabled) {
    background: #999999;
  }

  /* Loading Indicator */
  .me-agent-loading {
    display: flex;
    align-items: center;
    gap: 4px;
  }

  .me-agent-loading-text {
    color: #6b7280;
    font-size: 14px;
  }

  .me-agent-loading-dots {
    display: flex;
    align-items: flex-end;
    gap: 2px;
    height: 14px;
  }

  .me-agent-loading-dot {
    width: 4px;
    height: 4px;
    border-radius: 50%;
    background: #9ca3af;
    animation: bounce 1.4s infinite ease-in-out both;
  }

  .me-agent-loading-dot:nth-child(1) {
    animation-delay: -0.32s;
  }

  .me-agent-loading-dot:nth-child(2) {
    animation-delay: -0.16s;
  }

  .me-agent-loading-dot:nth-child(3) {
    animation-delay: 0s;
  }

  @keyframes bounce {
    0%, 60%, 100% {
      transform: translateY(0);
      opacity: 0.4;
    }
    30% {
      transform: translateY(-4px);
      opacity: 1;
    }
  }

  /* Card List Component (for offers, earnings, etc.) */
  .me-agent-card-list {
    background: #CCD3FF;
    border: 1px solid #8899FF;
    border-radius: 16px;
    padding: 16px;
    margin-top: 8px;
    animation: slideIn 0.3s ease;
  }

  .me-agent-card-list-content {
    display: flex;
    gap: 12px;
    align-items: center;
  }

  .me-agent-card-avatars {
    display: flex;
    position: relative;
    min-width: fit-content;
  }

  .me-agent-card-avatar {
    width: 48px;
    height: 48px;
    border-radius: 12px;
    border: 2px solid #CCD3FF;
    background-size: cover;
    background-position: center;
    background-color: white;
    margin-left: -8px;
    flex-shrink: 0;
  }

  .me-agent-card-avatar:first-child {
    margin-left: 0;
  }

  .me-agent-card-avatar-overlay {
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .me-agent-card-avatar-overlay::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.6);
    border-radius: 12px;
    z-index: 1;
  }

  .me-agent-card-avatar-count {
    color: white;
    font-size: 14px;
    font-weight: 700;
    text-shadow: 0 1px 2px rgba(0, 0, 0, 0.2);
    position: relative;
    z-index: 2;
  }

  .me-agent-card-list-text {
    flex: 1;
  }

  .me-agent-card-list-title {
    font-size: 14px;
    color: #374151;
    font-weight: 500;
  }

  .me-agent-card-list-button {
    color: #0F0F0F;
    border: none;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    padding: 0px;
    margin: 0px;
    transition: opacity 0.2s ease;
    background: none;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 4px;
  }

  .me-agent-card-list-button:hover {
    opacity: 0.8;
  }

  /* Detail Panel */
  .me-agent-detail-panel {
    width: 100%;
    height: 100%;
    background: white;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.3s ease;
  }

  .me-agent-detail-panel.visible {
    opacity: 1;
    pointer-events: auto;
  }

  .me-agent-offers-header {
    padding: 20px;
    background: white;
    color: #0f0f0f;
    display: flex;
    justify-content: space-between;
    align-items: center;
    min-height: 76px;
  }

  .me-agent-offers-title {
    font-size: 18px;
    font-weight: 600;
    margin: 0;
    flex: 1;
  }

  .me-agent-offers-back,
  .me-agent-offers-close {
    background: none;
    border: none;
    color: #0f0f0f;
    cursor: pointer;
    padding: 8px;
    border-radius: 4px;
    transition: background 0.2s ease;
    display: flex;
    align-items: center;
    gap: 4px;
    font-size: 14px;
    font-weight: 500;
  }

  .me-agent-offers-back {
    margin-right: auto;
  }

  .me-agent-offers-back svg,
  .me-agent-offers-close svg {
    display: inline-block;
    vertical-align: middle;
  }

  .me-agent-offers-close {
    font-size: 24px;
    width: 32px;
    height: 32px;
    justify-content: center;
  }

  .me-agent-offers-back:hover,
  .me-agent-offers-close:hover {
    background: rgba(255, 255, 255, 0.1);
  }

  /* Offers Grid */
  .me-agent-offers-grid {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 16px;
    align-content: start;
  }

  /* Brands List */
  .me-agent-brands-list {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .me-agent-brand-card {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 16px 20px;
    background: #FAFAFA;
    border: 1px solid #F5F5F5;
    border-radius: 16px;
    transition: all 0.2s ease;
  }

  .me-agent-brand-card:hover {
  }

  .me-agent-brand-logo-container {
    flex-shrink: 0;
    width: 64px;
    height: 64px;
    border-radius: 12px;
    overflow: hidden;
    background: #000000;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .me-agent-brand-logo {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .me-agent-brand-info {
    flex: 1;
    min-width: 0;
  }

  .me-agent-brand-name {
    font-family: 'Clash Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    font-size: 24px;
    font-weight: 600;
    color: #000000;
    margin: 0 0 2px 0;
  }

  .me-agent-brand-conversion {
    font-size: 14px;
    color: #6B7280;
    margin: 0;
  }

  .me-agent-brand-actions {
    display: flex;
    flex-direction: column;
    align-items: flex-end;
    gap: 8px;
  }

  .me-agent-brand-reward-amount {
    font-family: 'Clash Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    font-size: 24px;
    font-weight: 600;
    color: #000000;
    text-align: right;
  }

  .me-agent-brand-reward-symbol {
    font-size: 12px;
    color: #000000;
    font-weight: 500;
  }

  .me-agent-brand-signup-button {
    flex-shrink: 0;
    padding: 8px 12px;
    background: transparent;
    color: #000000;
    border: 1px solid #E6E6E6;
    border-radius: 8px;
    font-size: 12px;
    font-weight: 400;
    cursor: pointer;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    gap: 8px;
    transition: all 0.2s ease;
  }

  .me-agent-brand-signup-button:hover {
    background: #F9FAFB;
    border-color: #D1D5DB;
  }

  .me-agent-brand-signup-button svg {
    flex-shrink: 0;
  }

  /* Category Grid Styles */
  .me-agent-categories-grid {
    overflow-y: auto;
    padding: 20px;
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 16px;
  }

  .me-agent-category-card {
    background: white;
    border-radius: 12px;
    overflow: hidden;
    cursor: pointer;
    transition: transform 0.2s ease, box-shadow 0.2s ease;
    border: 1px solid #F5F5F5;
    height: 162px;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    padding: 16px;
  }

  .me-agent-category-card:hover {
    transform: scale(1.02);
  }

  .me-agent-category-image-container {
    position: relative;
    width: 100%;
    padding-top: 100%;
    overflow: hidden;
  }

  .me-agent-category-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .me-agent-category-icon-overlay {
    width: 24px;
    height: 24px;
    background: black;
    border-radius: 4px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .me-agent-category-info {
    // padding: 16px;
  }

  .me-agent-category-title {
    font-family: 'Clash Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    font-size: 18px;
    font-weight: 600;
    color: #000000;
    margin: 0 0 8px 0;
    line-height: 1.3;
  }

  .me-agent-category-brand-count {
    font-size: 14px;
    color: #6B7280;
    margin: 0;
  }

  /* Brand Offers List Styles */
  .me-agent-brands-offers-list {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  .me-agent-brand-offers-section {
    background: white;
    border-radius: 16px;
    border: 1px solid #F5F5F5;
  }

  .me-agent-brand-offers-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    margin-bottom: 16px;
  }

  .me-agent-brand-offers-info {
    display: flex;
    align-items: center;
    gap: 12px;
    flex: 1;
    min-width: 0;
  }

  .me-agent-brand-offers-logo {
    width: 44px;
    height: 44px;
    border-radius: 50%;
    object-fit: cover;
    flex-shrink: 0;
    background: #F9FAFB;
  }

  .me-agent-brand-offers-name {
    font-family: 'Clash Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', sans-serif;
    font-size: 24px;
    font-weight: 600;
    color: #000000;
    margin: 0;
  }

  .me-agent-brand-earning-amount {
    font-size: 12px;
    font-weight: 500;
    color: #ffffff;
    text-align: right;
    flex-shrink: 0;
    padding: 8px 16px;
    background: #000000;
    border-radius: 8px;
  }

  .me-agent-brand-offers-scroll {
    display: flex;
    gap: 16px;
    overflow-x: auto;
    overflow-y: hidden;
    padding: 4px 0;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: thin;
    scrollbar-color: #E5E7EB #F9FAFB;
  }

  .me-agent-brand-offers-scroll::-webkit-scrollbar {
    height: 6px;
  }

  .me-agent-brand-offers-scroll::-webkit-scrollbar-track {
    background: #F9FAFB;
    border-radius: 3px;
  }

  .me-agent-brand-offers-scroll::-webkit-scrollbar-thumb {
    background: #E5E7EB;
    border-radius: 3px;
  }

  .me-agent-brand-offers-scroll::-webkit-scrollbar-thumb:hover {
    background: #D1D5DB;
  }

  .me-agent-brand-offer-card {
    min-width: 200px;
    max-width: 200px;
    background: #FAFAFA;
    border: 1px solid #F5F5F5;
    border-radius: 12px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.2s ease;
    flex-shrink: 0;
  }

  .me-agent-brand-offer-card:hover {
    transform: scale(1.02);
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
  }

  .me-agent-brand-offer-image-container {
    position: relative;
    width: 100%;
    padding-top: 100%;
    overflow: hidden;
    background: white;
  }

  .me-agent-brand-offer-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .me-agent-brand-offer-badge {
    position: absolute;
    top: 8px;
    right: 8px;
    background: #000000;
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
  }

  .me-agent-brand-offer-info {
    padding: 12px;
  }

  .me-agent-brand-offer-name {
    font-size: 14px;
    font-weight: 500;
    color: #000000;
    margin: 0 0 8px 0;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }

  .me-agent-brand-offer-pricing {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .me-agent-brand-offer-price {
    font-size: 16px;
    font-weight: 600;
    color: #000000;
  }

  .me-agent-brand-offer-original-price {
    font-size: 14px;
    color: #9CA3AF;
    text-decoration: line-through;
  }

  .me-agent-empty-state {
    text-align: center;
    padding: 40px 20px;
    color: #6B7280;
    font-size: 16px;
  }

  .me-agent-offer-card {
    background: #FAFAFA;
    border-radius: 12px;
    overflow: hidden;
    cursor: pointer;
    transition: all 0.2s ease;
    border: 1px solid #F5F5F5;
  }

  .me-agent-offer-card:hover {
    transform: scale(1.02);
  }

  .me-agent-offer-image-container {
    position: relative;
    width: 100%;
    padding-top: 100%;
    overflow: hidden;
  }

  .me-agent-offer-image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-size: cover;
    background-position: center;
    background-color: #f3f4f6;
  }

  .me-agent-offer-badge {
    position: absolute;
    top: 12px;
    right: 12px;
    background: #000000;
    color: white;
    padding: 6px 12px;
    border-radius: 20px;
    font-size: 12px;
    font-weight: 500;
    z-index: 1;
  }

  .me-agent-offer-info {
    padding: 16px;
  }

  .me-agent-offer-name {
    font-size: 14px;
    font-weight: 600;
    color: #0f0f0f;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .me-agent-offer-pricing {
    display: flex;
    align-items: center;
    gap: 8px;
  }

  .me-agent-offer-price {
    font-size: 14px;
    color: #0f0f0f;
    font-weight: 700;
  }

  .me-agent-offer-original-price {
    font-size: 14px;
    color: #9ca3af;
    font-weight: 400;
    text-decoration: line-through;
  }

  /* Offers Loading */
  .me-agent-offers-loading {
    flex: 1;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Offer Detail */
  .me-agent-offer-detail {
    flex: 1;
    display: flex;
    flex-direction: column;
    background: white;
    height: 100%;
    overflow: hidden;
  }

  .me-agent-offer-detail-scroll {
    flex: 1;
    overflow-y: auto;
    padding: 20px;
    min-height: 0;
  }

  /* Image Carousel */
  .me-agent-image-carousel {
    display: flex;
    gap: 12px;
    margin-bottom: 24px;
    overflow-x: auto;
  }

  .me-agent-carousel-image {
    flex-shrink: 0;
    width: 280px;
    height: 280px;
    background-size: cover;
    background-position: center;
    background-color: #f3f4f6;
    border-radius: 12px;
  }

  .me-agent-carousel-image.active {
    border: 2px solid #0f0f0f;
  }

  /* Product Info */
  .me-agent-detail-info {
    margin-bottom: 24px;
  }

  .me-agent-detail-title {
    font-size: 18px;
    font-weight: 600;
    color: #0f0f0f;
    margin: 0 0 12px 0;
  }

  .me-agent-detail-pricing {
    display: flex;
    gap: 8px;
    align-items: baseline;
    margin-bottom: 12px;
  }

  .me-agent-detail-price {
    font-size: 20px;
    font-weight: 700;
    color: #0f0f0f;
  }

  .me-agent-detail-original-price {
    font-size: 18px;
    color: #9ca3af;
    text-decoration: line-through;
  }

  .me-agent-detail-badge {
    display: inline-flex;
    align-items: center;
    gap: 6px;
    padding: 8px 12px;
    background: #000000;
    color: white;
    border-radius: 20px;
    font-size: 13px;
    font-weight: 500;
    margin-bottom: 16px;
  }

  .me-agent-detail-shipping {
    font-size: 14px;
    color: #6b7280;
    margin: 0 0 20px 0;
  }

  /* Section Label */
  .me-agent-section-label {
    font-size: 14px;
    font-weight: 600;
    color: #0f0f0f;
    display: block;
    margin-bottom: 12px;
  }

  /* Variant Section */
  .me-agent-variant-section {
    margin-bottom: 20px;
  }

  .me-agent-variant-grid {
    display: grid;
    grid-template-columns: repeat(4, 1fr);
    gap: 12px;
  }

  .me-agent-variant-card {
    background: none;
    border: 2px solid #e5e7eb;
    border-radius: 12px;
    cursor: pointer;
    padding: 0;
    overflow: hidden;
    transition: all 0.2s ease;
  }

  .me-agent-variant-card:hover:not(.disabled) {
    border-color: #0f0f0f;
  }

  .me-agent-variant-card.active {
    border-color: #0f0f0f;
    box-shadow: 0 0 0 1px #0f0f0f;
  }

  .me-agent-variant-card.disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .me-agent-variant-image {
    position: relative;
    width: 100%;
    padding-top: 100%;
    background-size: cover;
    background-position: center;
    background-color: #f3f4f6;
  }

  .me-agent-variant-discount {
    position: absolute;
    bottom: 8px;
    left: 8px;
    right: 8px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 4px;
    padding: 4px 8px;
    background: #000000;
    color: white;
    border-radius: 12px;
    font-size: 11px;
    font-weight: 500;
  }

  /* Quantity Section */
  .me-agent-quantity-section {
    margin-bottom: 20px;
  }

  .me-agent-quantity-selector {
    display: flex;
    align-items: center;
    gap: 16px;
    max-width: 200px;
  }

  .me-agent-quantity-btn {
    width: 40px;
    height: 40px;
    border: 1px solid #e5e7eb;
    background: white;
    border-radius: 8px;
    cursor: pointer;
    font-size: 20px;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .me-agent-quantity-btn:hover {
    background: #f9fafb;
    border-color: #d1d5db;
  }

  .me-agent-quantity-input {
    flex: 1;
    height: 40px;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    text-align: center;
    font-size: 16px;
    font-weight: 500;
  }

  .me-agent-quantity-input:focus {
    outline: none;
    border-color: #0f0f0f;
  }

  /* Tabs */
  .me-agent-tabs {
    display: flex;
    gap: 8px;
    margin-bottom: 20px;
    border-bottom: 1px solid #e5e7eb;
  }

  .me-agent-tab {
    padding: 12px 24px;
    background: none;
    border: none;
    border-bottom: 2px solid transparent;
    cursor: pointer;
    font-size: 14px;
    font-weight: 500;
    color: #6b7280;
    transition: all 0.2s ease;
  }

  .me-agent-tab.active {
    color: #0f0f0f;
    border-bottom-color: #0f0f0f;
  }

  .me-agent-tab-content {
    min-height: 200px;
  }

  .me-agent-tab-pane {
    display: none;
  }

  .me-agent-tab-pane.active {
    display: block;
  }

  .me-agent-description-text {
    font-size: 14px;
    color: #4b5563;
    line-height: 1.6;
    margin: 0;
  }

  /* Reviews */
  .me-agent-reviews {
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  .me-agent-reviews-summary {
    display: flex;
    gap: 32px;
    align-items: flex-start;
  }

  .me-agent-reviews-bars {
    flex: 1;
    display: flex;
    flex-direction: column;
    gap: 8px;
  }

  .me-agent-rating-row {
    display: flex;
    align-items: center;
    gap: 12px;
  }

  .me-agent-stars-small {
    display: flex;
    gap: 2px;
    color: #d1d5db;
  }

  .me-agent-stars-small span.filled {
    color: #f59e0b;
  }

  .me-agent-rating-bar {
    flex: 1;
    height: 6px;
    background: #e5e7eb;
    border-radius: 3px;
    overflow: hidden;
  }

  .me-agent-rating-fill {
    height: 100%;
    background: #f59e0b;
  }

  .me-agent-rating-count {
    font-size: 14px;
    color: #6b7280;
    min-width: 30px;
    text-align: right;
  }

  .me-agent-reviews-score {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 8px;
  }

  .me-agent-score-number {
    font-size: 48px;
    font-weight: 700;
    color: #0f0f0f;
    line-height: 1;
  }

  .me-agent-score-number span {
    font-size: 24px;
    color: #9ca3af;
  }

  .me-agent-stars-large {
    display: flex;
    gap: 4px;
    font-size: 20px;
    color: #d1d5db;
  }

  .me-agent-stars-large span.filled {
    color: #f59e0b;
  }

  .me-agent-review-count {
    font-size: 14px;
    color: #6b7280;
  }

  .me-agent-reviews-list {
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .me-agent-review-item {
    padding: 16px;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
  }

  .me-agent-review-header {
    display: flex;
    gap: 12px;
    align-items: center;
    margin-bottom: 12px;
  }

  .me-agent-reviewer-avatar {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  }

  .me-agent-reviewer-name {
    font-size: 14px;
    font-weight: 600;
    color: #0f0f0f;
    margin-bottom: 4px;
  }

  .me-agent-review-stars {
    display: flex;
    gap: 2px;
    font-size: 14px;
    color: #d1d5db;
  }

  .me-agent-review-stars span.filled {
    color: #f59e0b;
  }

  .me-agent-review-text {
    font-size: 14px;
    color: #4b5563;
    line-height: 1.6;
    margin: 0;
  }

  /* Redemption Info */
  .me-agent-redemption-info {
    margin-top: 24px;
    padding: 16px;
    background: #f9fafb;
    border-radius: 12px;
    font-size: 14px;
    color: #4b5563;
    line-height: 1.6;
  }

  .me-agent-redemption-info p {
    margin: 0;
  }

  /* Bottom Actions */
  .me-agent-detail-actions {
    position: sticky;
    bottom: 0;
    background: white;
    padding: 16px 20px;
    border-top: 1px solid #e5e7eb;
    display: flex;
    gap: 12px;
    align-items: center;
  }

  .me-agent-redeem-button {
    flex: 1;
    padding: 14px 24px;
    background: #000000;
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .me-agent-redeem-button:hover {
    background: #1f1f1f;
  }

  .me-agent-secondary-actions {
    display: flex;
    gap: 8px;
    align-items: center;
  }

  .me-agent-action-button {
    padding: 14px 20px;
    background: white;
    color: #0f0f0f;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .me-agent-action-button:hover {
    background: #f9fafb;
    border-color: #d1d5db;
  }

  .me-agent-action-icon {
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    color: #0f0f0f;
  }

  .me-agent-action-icon:hover {
    background: #f9fafb;
    border-color: #d1d5db;
  }

  .me-agent-action-icon.liked {
    color: #ef4444;
  }

  .me-agent-offer-detail-header {
    display: flex;
    gap: 12px;
    align-items: center;
    margin-bottom: 20px;
  }

  .me-agent-offer-brand-logo {
    width: 60px;
    height: 60px;
    border-radius: 8px;
    object-fit: cover;
    border: 1px solid #e5e7eb;
  }

  .me-agent-offer-detail-name {
    font-size: 20px;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 4px 0;
  }

  .me-agent-offer-detail-brand {
    font-size: 14px;
    color: #6b7280;
    margin: 0;
  }

  .me-agent-offer-detail-pricing {
    background: #f9fafb;
    padding: 16px;
    border-radius: 8px;
    margin-bottom: 20px;
  }

  .me-agent-offer-detail-discount {
    display: inline-block;
    background: #dcfce7;
    color: #166534;
    padding: 6px 12px;
    border-radius: 6px;
    font-size: 14px;
    font-weight: 600;
    margin-bottom: 12px;
  }

  .me-agent-offer-detail-price {
    display: flex;
    gap: 12px;
    align-items: baseline;
  }

  .me-agent-offer-detail-original {
    font-size: 18px;
    color: #9ca3af;
    text-decoration: line-through;
  }

  .me-agent-offer-detail-final {
    font-size: 28px;
    color: #1f2937;
    font-weight: 700;
  }

  .me-agent-offer-detail-description h4 {
    font-size: 16px;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 8px 0;
  }

  .me-agent-offer-detail-description p {
    font-size: 14px;
    color: #4b5563;
    line-height: 1.6;
    margin: 0 0 20px 0;
  }

  .me-agent-offer-detail-code {
    background: #fef3c7;
    padding: 12px;
    border-radius: 8px;
    margin-bottom: 20px;
    font-size: 14px;
    color: #92400e;
  }

  .me-agent-offer-detail-code strong {
    font-weight: 600;
  }

  .me-agent-offer-claim-button {
    width: 100%;
    padding: 14px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .me-agent-offer-claim-button:hover {
    transform: scale(1.02);
  }

  /* OTP Container */
  .me-agent-otp-container {
    padding: 32px 24px;
    display: flex;
    flex-direction: column;
    gap: 20px;
  }

  .me-agent-otp-description {
    font-size: 14px;
    color: #6b7280;
    line-height: 1.6;
    margin: 0;
  }

  .me-agent-otp-form {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .me-agent-otp-email-input {
    width: 100%;
    padding: 12px 16px;
    border: 1px solid #d1d5db;
    border-radius: 8px;
    font-size: 14px;
    outline: none;
    transition: border-color 0.2s ease;
  }

  .me-agent-otp-email-input:focus {
    border-color: #667eea;
  }

  .me-agent-otp-send-button {
    width: 100%;
    padding: 12px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .me-agent-otp-send-button:hover:not(:disabled) {
    transform: scale(1.02);
  }

  .me-agent-otp-send-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .me-agent-otp-status {
    padding: 12px;
    border-radius: 8px;
    font-size: 14px;
    line-height: 1.5;
  }

  .me-agent-otp-status-success {
    background: #dcfce7;
    color: #166534;
    border: 1px solid #86efac;
  }

  .me-agent-otp-status-error {
    background: #fee2e2;
    color: #991b1b;
    border: 1px solid #fca5a5;
  }

  /* Variants Selector (Horizontal) */
  .me-agent-variants-selector {
    margin: 12px 0;
    padding: 12px 0;
    border-top: 1px solid #e5e7eb;
    border-bottom: 1px solid #e5e7eb;
  }

  .me-agent-variants-list-horizontal {
    display: flex;
    gap: 8px;
    overflow-x: auto;
    padding: 4px 0;
    scrollbar-width: thin;
    scrollbar-color: #d1d5db #f3f4f6;
  }

  .me-agent-variants-list-horizontal::-webkit-scrollbar {
    height: 6px;
  }

  .me-agent-variants-list-horizontal::-webkit-scrollbar-track {
    background: #f3f4f6;
    border-radius: 3px;
  }

  .me-agent-variants-list-horizontal::-webkit-scrollbar-thumb {
    background: #d1d5db;
    border-radius: 3px;
  }

  .me-agent-variants-list-horizontal::-webkit-scrollbar-thumb:hover {
    background: #9ca3af;
  }

  .me-agent-variant-chip {
    display: inline-flex;
    flex-direction: column;
    align-items: center;
    gap: 2px;
    padding: 10px 16px;
    background: white;
    border: 2px solid #e5e7eb;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
    flex-shrink: 0;
    font-size: 13px;
  }

  .me-agent-variant-chip:hover:not(:disabled) {
    border-color: #667eea;
    background: #f9fafb;
  }

  .me-agent-variant-chip.active {
    border-color: #667eea;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.1) 0%, rgba(118, 75, 162, 0.1) 100%);
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.2);
  }

  .me-agent-variant-chip.out-of-stock {
    opacity: 0.5;
    cursor: not-allowed;
    background: #f3f4f6;
  }

  .me-agent-variant-chip:disabled {
    cursor: not-allowed;
  }

  .me-agent-variant-chip-name {
    font-weight: 600;
    color: #1f2937;
  }

  .me-agent-variant-chip.active .me-agent-variant-chip-name {
    color: #667eea;
  }

  .me-agent-variant-chip-options {
    font-size: 11px;
    color: #6b7280;
  }

  .me-agent-variant-chip-stock {
    font-size: 10px;
    color: #dc2626;
    font-weight: 500;
  }

  /* Rewards Container */
  .me-agent-rewards-container {
    padding: 24px;
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .me-agent-rewards-description {
    font-size: 14px;
    color: #6b7280;
    margin: 0;
  }

  .me-agent-rewards-list {
    display: flex;
    flex-direction: column;
    gap: 12px;
  }

  .me-agent-reward-item {
    display: flex;
    align-items: center;
    gap: 16px;
    padding: 16px;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 12px;
    transition: all 0.2s ease;
  }

  .me-agent-reward-item:hover {
    border-color: #667eea;
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.1);
  }

  .me-agent-reward-image {
    width: 60px;
    height: 60px;
    border-radius: 12px;
    background-size: cover;
    background-position: center;
    background-color: #f3f4f6;
    flex-shrink: 0;
  }

  .me-agent-reward-info {
    flex: 1;
  }

  .me-agent-reward-name {
    font-size: 16px;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 4px 0;
  }

  .me-agent-reward-symbol {
    font-size: 12px;
    color: #6b7280;
    margin: 0 0 6px 0;
  }

  .me-agent-reward-balance {
    font-size: 14px;
    color: #374151;
    font-weight: 500;
    margin: 0;
  }

  .me-agent-reward-select-button {
    padding: 10px 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s ease;
    flex-shrink: 0;
  }

  .me-agent-reward-select-button:hover {
    transform: scale(1.05);
  }

  /* Error Container */
  .me-agent-error-container {
    padding: 48px 32px;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 16px;
  }

  .me-agent-error-icon {
    font-size: 64px;
    margin-bottom: 8px;
  }

  .me-agent-error-container h3 {
    font-size: 20px;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 8px 0;
  }

  .me-agent-error-container p {
    font-size: 14px;
    color: #6b7280;
    line-height: 1.6;
    margin: 0;
    max-width: 400px;
  }

  .me-agent-error-container strong {
    color: #1f2937;
    font-weight: 600;
  }

  .me-agent-error-back-button {
    margin-top: 16px;
    padding: 12px 24px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .me-agent-error-back-button:hover {
    transform: scale(1.05);
  }

  /* Onboarding Container */
  .me-agent-onboarding-container {
    padding: 40px 24px;
    display: flex;
    flex-direction: column;
    align-items: center;
    text-align: center;
    gap: 20px;
  }

  .me-agent-onboarding-spinner {
    width: 60px;
    height: 60px;
    border: 4px solid #e5e7eb;
    border-top-color: #667eea;
    border-radius: 50%;
    animation: me-agent-spin 1s linear infinite;
  }

  @keyframes me-agent-spin {
    to {
      transform: rotate(360deg);
    }
  }

  .me-agent-onboarding-title {
    font-size: 20px;
    font-weight: 700;
    color: #1f2937;
    margin: 0;
  }

  .me-agent-onboarding-description {
    font-size: 14px;
    color: #6b7280;
    line-height: 1.5;
    max-width: 400px;
    margin: 0;
  }

  .me-agent-onboarding-status {
    font-size: 13px;
    color: #667eea;
    font-weight: 500;
    padding: 8px 16px;
    background: rgba(102, 126, 234, 0.1);
    border-radius: 20px;
  }

  /* Confirmation Container */
  .me-agent-confirm-container {
    padding: 24px;
    display: flex;
    flex-direction: column;
    gap: 24px;
  }

  .me-agent-confirm-summary {
    background: #f9fafb;
    padding: 24px;
    border-radius: 12px;
    display: flex;
    flex-direction: column;
    gap: 16px;
  }

  .me-agent-confirm-summary h3 {
    font-size: 18px;
    font-weight: 600;
    color: #1f2937;
    margin: 0 0 8px 0;
    padding-bottom: 16px;
    border-bottom: 1px solid #e5e7eb;
  }

  .me-agent-confirm-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    font-size: 14px;
  }

  .me-agent-confirm-item span {
    color: #6b7280;
  }

  .me-agent-confirm-item strong {
    color: #1f2937;
    font-weight: 600;
  }

  .me-agent-confirm-savings {
    color: #16a34a !important;
    font-size: 18px !important;
  }

  .me-agent-confirm-button {
    width: 100%;
    padding: 14px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    color: white;
    border: none;
    border-radius: 8px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: transform 0.2s ease;
  }

  .me-agent-confirm-button:hover {
    transform: scale(1.02);
  }

  /* Tablet Responsive */
  @media (max-width: 1024px) {
    .me-agent-offers-grid {
      grid-template-columns: repeat(3, 1fr);
      gap: 16px;
    }
  }

  /* Mobile Responsive */
  @media (max-width: 768px) {
    .me-agent-offers-grid {
      grid-template-columns: repeat(2, 1fr);
      gap: 12px;
    }
  }

  @media (max-width: 480px) {
    .me-agent-chat {
      width: calc(100vw - 32px) !important;
      height: calc(100vh - 40px) !important;
      bottom: 20px !important;
    }

    .me-agent-button {
      bottom: 16px;
    }

    .me-agent-chat.bottom-right,
    .me-agent-chat.bottom-left {
      left: 16px !important;
      right: 16px !important;
    }

    .me-agent-chat.maximized {
      width: 100vw !important;
      height: 100vh !important;
      top: 0 !important;
      bottom: 0 !important;
      left: 0 !important;
      right: 0 !important;
      border-radius: 0;
    }

    .me-agent-chat.maximized.has-detail-panel {
      width: 100vw !important;
    }

    .me-agent-button.bottom-right {
      right: 16px;
    }

    .me-agent-button.bottom-left {
      left: 16px;
    }

    /* Mobile Detail Panel - Full overlay */
    .me-agent-chat.has-detail-panel .me-agent-detail-panel-wrapper {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      width: 100%;
      z-index: 10;
      border-left: none;
    }

    .me-agent-offers-grid {
      padding: 12px;
    }

    .me-agent-card-list-content {
      flex-direction: column;
      align-items: flex-start;
    }
  }
`;
    /**
     * Inject styles into the document
     */
    function injectStyles() {
        const styleId = "me-agent-sdk-styles";
        // Check if styles already exist
        if (document.getElementById(styleId)) {
            return;
        }
        const styleElement = document.createElement("style");
        styleElement.id = styleId;
        styleElement.textContent = styles;
        document.head.appendChild(styleElement);
    }

    /**
     * Magic Link Client Wrapper
     * Handles authentication and wallet operations
     */
    class MagicClient {
        constructor(config) {
            this.magic = null;
            this.initialized = false;
            this.config = config;
        }
        /**
         * Initialize Magic SDK
         * Loads the Magic SDK from CDN if not already loaded
         */
        init() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.initialized) {
                    return;
                }
                // Load Magic SDK from CDN if not already loaded
                if (!window.Magic) {
                    yield this.loadMagicSDK();
                }
                // Initialize Magic instance with network configuration
                this.magic = new window.Magic(this.config.apiKey, {
                    network: {
                        rpcUrl: this.config.rpcUrl,
                        chainId: parseInt(this.config.chainId),
                    },
                });
                this.initialized = true;
            });
        }
        /**
         * Load Magic SDK from CDN
         */
        loadMagicSDK() {
            return new Promise((resolve, reject) => {
                // Check if already loaded
                if (window.Magic) {
                    resolve();
                    return;
                }
                const script = document.createElement("script");
                script.src = "https://auth.magic.link/sdk";
                script.async = true;
                script.onload = () => {
                    // Wait a bit for Magic to be available
                    setTimeout(() => resolve(), 100);
                };
                script.onerror = () => reject(new Error("Failed to load Magic SDK"));
                document.head.appendChild(script);
            });
        }
        /**
         * Check if user is logged in
         */
        isLoggedIn() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.initialized) {
                    yield this.init();
                }
                try {
                    return yield this.magic.user.isLoggedIn();
                }
                catch (error) {
                    console.error("Error checking Magic login status:", error);
                    return false;
                }
            });
        }
        /**
         * Get user metadata (including wallet address)
         */
        getUserMetadata() {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b;
                if (!this.initialized) {
                    yield this.init();
                }
                try {
                    // Magic SDK uses getInfo() method, not getMetadata()
                    const metadata = yield this.magic.user.getInfo();
                    // Extract wallet address from the wallets object
                    const publicAddress = (_b = (_a = metadata === null || metadata === void 0 ? void 0 : metadata.wallets) === null || _a === void 0 ? void 0 : _a.ethereum) === null || _b === void 0 ? void 0 : _b.publicAddress;
                    if (!publicAddress) {
                        console.error("Failed to extract wallet address from metadata:", metadata);
                        throw new Error("Magic returned invalid user metadata - no Ethereum wallet address found");
                    }
                    return {
                        publicAddress,
                        email: metadata.email || null,
                    };
                }
                catch (error) {
                    console.error("Error getting Magic user metadata:", error);
                    throw error;
                }
            });
        }
        /**
         * Login with email OTP
         */
        loginWithEmailOTP(email) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.initialized) {
                    yield this.init();
                }
                try {
                    // Magic SDK v11+ uses loginWithEmailOTP directly on auth
                    const didToken = yield this.magic.auth.loginWithEmailOTP({
                        email,
                        showUI: true, // Show Magic's UI for OTP entry
                    });
                    return didToken;
                }
                catch (error) {
                    console.error("Error logging in with Magic:", error);
                    throw error;
                }
            });
        }
        /**
         * Logout
         */
        logout() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.initialized) {
                    return;
                }
                try {
                    yield this.magic.user.logout();
                }
                catch (error) {
                    console.error("Error logging out from Magic:", error);
                    throw error;
                }
            });
        }
        /**
         * Get wallet address (shortcut method)
         */
        getWalletAddress() {
            return __awaiter(this, void 0, void 0, function* () {
                const metadata = yield this.getUserMetadata();
                return metadata.publicAddress;
            });
        }
    }

    /**
     * Redemption Manager
     * Handles the complete offer redemption flow
     */
    class RedeemManager {
        constructor(apiClient, magicConfig, openRewardDiamond) {
            this.magicClient = null;
            this.walletAddress = null;
            this.balances = [];
            this.meProtocolLoggedIn = false;
            this.currentEmail = null;
            this.meProtocolToken = null;
            this.apiClient = apiClient;
            this.magicClient = new MagicClient(magicConfig);
            this.openRewardDiamond = openRewardDiamond;
        }
        /**
         * Get email from config or stored email
         */
        getEmail() {
            return this.currentEmail || this.apiClient.getUserEmail() || null;
        }
        /**
         * Set email (for OTP flow)
         */
        setEmail(email) {
            this.currentEmail = email;
        }
        /**
         * Check if Magic is configured
         */
        isMagicConfigured() {
            return this.magicClient !== null;
        }
        /**
         * Check if user is authenticated
         */
        isAuthenticated() {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.magicClient) {
                    return false;
                }
                try {
                    return yield this.magicClient.isLoggedIn();
                }
                catch (error) {
                    console.error("Error checking authentication:", error);
                    return false;
                }
            });
        }
        /**
         * Get wallet address (with force refresh option)
         */
        getWalletAddress() {
            return __awaiter(this, arguments, void 0, function* (forceRefresh = false) {
                // Use cached value unless force refresh is requested
                if (this.walletAddress && !forceRefresh) {
                    return this.walletAddress;
                }
                if (!this.magicClient) {
                    throw new Error("Magic is not configured");
                }
                try {
                    // First verify user is logged in
                    const isLoggedIn = yield this.magicClient.isLoggedIn();
                    if (!isLoggedIn) {
                        throw new Error("User is not logged in to Magic");
                    }
                    // Retry logic for fetching wallet address (Magic might need a moment)
                    let retries = 3;
                    let lastError = null;
                    while (retries > 0) {
                        try {
                            // Fetch wallet address from Magic
                            this.walletAddress = yield this.magicClient.getWalletAddress();
                            if (this.walletAddress) {
                                return this.walletAddress;
                            }
                            // If null, wait and retry
                            console.warn("Wallet address is null, retrying...");
                            yield new Promise((resolve) => setTimeout(resolve, 1000));
                            retries--;
                        }
                        catch (err) {
                            lastError = err;
                            console.warn(`Error on attempt ${4 - retries}:`, err);
                            yield new Promise((resolve) => setTimeout(resolve, 1000));
                            retries--;
                        }
                    }
                    // All retries failed
                    throw new Error(`Failed to retrieve wallet address from Magic after 3 attempts. Last error: ${(lastError === null || lastError === void 0 ? void 0 : lastError.message) || "Unknown"}`);
                }
                catch (error) {
                    console.error("Error getting wallet address:", error);
                    throw error;
                }
            });
        }
        /**
         * Clear cached wallet address (useful after logout or re-authentication)
         */
        clearWalletAddressCache() {
            this.walletAddress = null;
        }
        /**
         * Send OTP to email
         */
        sendOTP(email) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.magicClient) {
                    throw new Error("Magic is not configured");
                }
                try {
                    this.currentEmail = email; // Store email for later use
                    yield this.magicClient.loginWithEmailOTP(email);
                }
                catch (error) {
                    console.error("Error sending OTP:", error);
                    throw error;
                }
            });
        }
        /**
         * Login to ME Protocol (creates account if new user)
         */
        loginToMEProtocol() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const email = this.getEmail();
                    if (!email) {
                        throw new Error("Email not available");
                    }
                    // Force refresh wallet address to ensure we have the latest from Magic
                    const walletAddress = yield this.getWalletAddress(true);
                    // Login to ME Protocol (this creates account if new user)
                    const loginResponse = yield this.apiClient.meProtocolLogin(email, walletAddress);
                    if (loginResponse.data.user && loginResponse.data.token) {
                        this.meProtocolLoggedIn = true;
                        this.meProtocolToken = loginResponse.data.token; // Store the token
                    }
                    else {
                        throw new Error("Login failed");
                    }
                }
                catch (error) {
                    console.error("Error logging in to ME Protocol:", error);
                    throw error;
                }
            });
        }
        /**
         * Check if user is logged in to ME Protocol
         */
        isMEProtocolLoggedIn() {
            return this.meProtocolLoggedIn;
        }
        /**
         * Fetch user's reward balances
         */
        fetchBalances() {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const walletAddress = yield this.getWalletAddress();
                    if (!this.meProtocolToken) {
                        throw new Error("ME Protocol token not available. Please login first.");
                    }
                    const balances = yield this.apiClient.fetchRewardBalances(walletAddress, this.meProtocolToken);
                    this.balances = balances;
                    return balances;
                }
                catch (error) {
                    console.error("Error fetching balances:", error);
                    throw error;
                }
            });
        }
        /**
         * Calculate swap amount for redemption
         * @param selectedRewardAddress - The contract address of the reward the user selected to use
         * @param offerDetail - The offer detail containing the reward they want to redeem for
         * @param selectedVariantId - Optional variant ID if the offer has variants
         */
        calculateSwapAmount(selectedRewardAddress, offerDetail, selectedVariantId) {
            return __awaiter(this, void 0, void 0, function* () {
                try {
                    const walletAddress = yield this.getWalletAddress();
                    if (!this.meProtocolToken) {
                        throw new Error("ME Protocol token not available. Please login first.");
                    }
                    // Use provided variant ID, or first variant if available
                    let variantId = selectedVariantId;
                    if (!variantId &&
                        offerDetail.offerVariants &&
                        offerDetail.offerVariants.length > 0) {
                        variantId = offerDetail.offerVariants[0].id;
                    }
                    const payload = {
                        walletAddress,
                        inputRewardAddress: selectedRewardAddress, // The reward the user wants to use
                        outPutRewardAddress: offerDetail.reward.contractAddress, // The reward from the offer
                        redemptionMethodId: offerDetail.redemptionMethod.id,
                        offerId: offerDetail.id,
                        variantId,
                        brandId: offerDetail.brand.id,
                    };
                    const result = yield this.apiClient.fetchSwapAmount(payload, this.meProtocolToken);
                    return result;
                }
                catch (error) {
                    console.error("Error calculating swap amount:", error);
                    throw error;
                }
            });
        }
        /**
         * Update Magic network configuration
         */
        updateNetwork(brandNetwork) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!this.magicClient) {
                    return;
                }
            });
        }
        /**
         * Check if user can afford the offer with selected reward
         */
        canAffordOffer(selectedReward, amountNeeded) {
            return selectedReward.balance >= amountNeeded;
        }
        /**
         * Get cached balances
         */
        getCachedBalances() {
            return this.balances;
        }
        /**
         * Clear wallet address cache
         */
        clearCache() {
            this.walletAddress = null;
            this.balances = [];
        }
        /**
         * Logout - REMOVED: Users should stay logged in
         * Kept for backward compatibility but does nothing
         */
        logout() {
            return __awaiter(this, void 0, void 0, function* () {
                // Do nothing - users stay logged in with Magic
            });
        }
    }

    /**
     * Environment types
     */
    exports.Environment = void 0;
    (function (Environment) {
        Environment["DEV"] = "dev";
        Environment["STAGING"] = "staging";
        Environment["PROD"] = "prod";
    })(exports.Environment || (exports.Environment = {}));
    /**
     * Supported Networks
     */
    exports.SupportedNetwork = void 0;
    (function (SupportedNetwork) {
        SupportedNetwork["SEPOLIA"] = "sepolia";
        SupportedNetwork["HEDERA"] = "hedera";
        SupportedNetwork["BASE"] = "base";
        SupportedNetwork["POLYGON"] = "polygon";
    })(exports.SupportedNetwork || (exports.SupportedNetwork = {}));
    // Development environment
    const DEV_CONFIG = {
        API_URL: 'https://paas.meappbounty.com/v1/api/',
        AGENT_BASE_URL: 'https://fastapi-proxy-580283507238.us-central1.run.app',
        ME_API_KEY: 'hl3elmtvji75or71j4xy5e',
        API_V1_URL: 'https://api.meappbounty.com/',
        MAGIC_PUBLISHABLE_API_KEY: 'pk_live_FB79F672A43B8AC2',
        RUNTIME_URL: 'https://runtime.meappbounty.com',
        GELATO_API_KEY: 'g1UFyiAfIyq_m_M3Cn3LWIO6VQpjVTIbeCV7XLzWGb4_',
    };
    // Staging environment
    const STAGING_CONFIG = {
        API_URL: 'https://paas-staging.meappbounty.com/v1/api/',
        AGENT_BASE_URL: 'https://fastapi-proxy-staging-580283507238.us-central1.run.app',
        ME_API_KEY: 'staging_key',
        API_V1_URL: 'https://api-staging.meappbounty.com/',
        MAGIC_PUBLISHABLE_API_KEY: 'pk_live_STAGING_KEY',
        RUNTIME_URL: 'https://runtime-staging.meappbounty.com',
        GELATO_API_KEY: 'staging_gelato_key',
    };
    // Production environment
    const PROD_CONFIG = {
        API_URL: 'https://paas.meappbounty.com/v1/api/',
        AGENT_BASE_URL: 'https://fastapi-proxy.meappbounty.com',
        ME_API_KEY: 'prod_key',
        API_V1_URL: 'https://api.meappbounty.com/',
        MAGIC_PUBLISHABLE_API_KEY: 'pk_live_PROD_KEY',
        RUNTIME_URL: 'https://runtime.meappbounty.com',
        GELATO_API_KEY: 'prod_gelato_key',
    };
    const ENV_CONFIGS = {
        [exports.Environment.DEV]: DEV_CONFIG,
        [exports.Environment.STAGING]: STAGING_CONFIG,
        [exports.Environment.PROD]: PROD_CONFIG,
    };
    const NETWORK_CONFIGS = {
        [exports.SupportedNetwork.SEPOLIA]: {
            CHAIN_ID: '11155111',
            RPC_URL: 'https://eth-sepolia.g.alchemy.com/v2/Ytq0aV34dWOA9X6gWhl_6trwmUTb58Ip',
            OPEN_REWARD_DIAMOND: '0xacd3379d449ad0042a12f4fa88bc183948f7f472',
        },
        [exports.SupportedNetwork.HEDERA]: {
            CHAIN_ID: '296',
            RPC_URL: 'https://testnet.hashio.io/api',
            OPEN_REWARD_DIAMOND: '0x3b03a7980bfe38c9daa4c346ccf495eb24e16782',
        },
        [exports.SupportedNetwork.BASE]: {
            CHAIN_ID: '11155111', // Using Sepolia for now
            RPC_URL: 'https://eth-sepolia.g.alchemy.com/v2/Ytq0aV34dWOA9X6gWhl_6trwmUTb58Ip',
            OPEN_REWARD_DIAMOND: '0xacd3379d449ad0042a12f4fa88bc183948f7f472',
        },
        [exports.SupportedNetwork.POLYGON]: {
            CHAIN_ID: '11155111', // Using Sepolia for now
            RPC_URL: 'https://eth-sepolia.g.alchemy.com/v2/Ytq0aV34dWOA9X6gWhl_6trwmUTb58Ip',
            OPEN_REWARD_DIAMOND: '0xacd3379d449ad0042a12f4fa88bc183948f7f472',
        },
    };
    /**
     * Get environment configuration based on environment and network
     */
    const getEnv = (environment = exports.Environment.DEV, network = exports.SupportedNetwork.SEPOLIA) => {
        const envConfig = ENV_CONFIGS[environment] || ENV_CONFIGS[exports.Environment.DEV];
        const networkConfig = NETWORK_CONFIGS[network] || NETWORK_CONFIGS[exports.SupportedNetwork.SEPOLIA];
        return Object.assign(Object.assign({}, envConfig), networkConfig);
    };
    // Default environment (Dev + Sepolia)
    getEnv(exports.Environment.DEV, exports.SupportedNetwork.SEPOLIA);

    /**
     * Main SDK Class
     */
    class MeAgentSDK {
        constructor(config) {
            this.redeemManager = null;
            this.button = null;
            this.chat = null;
            this.initialized = false;
            this.validateConfig(config);
            this.config = Object.assign({ position: "bottom-right", environment: exports.Environment.DEV, network: exports.SupportedNetwork.SEPOLIA }, config);
            // Get environment configuration based on environment and network
            this.env = getEnv(this.config.environment, this.config.network);
            this.stateManager = new StateManager();
            this.apiClient = new APIClient(this.config, this.env);
            // Initialize RedeemManager with network-specific configuration
            this.redeemManager = new RedeemManager(this.apiClient, {
                apiKey: this.env.MAGIC_PUBLISHABLE_API_KEY,
                chainId: this.env.CHAIN_ID,
                rpcUrl: this.env.RPC_URL,
            }, this.env.OPEN_REWARD_DIAMOND);
        }
        /**
         * Validate configuration
         */
        validateConfig(config) {
            // No required fields currently
        }
        /**
         * Initialize the SDK
         */
        init() {
            return __awaiter(this, void 0, void 0, function* () {
                if (this.initialized) {
                    console.warn("MeAgent SDK: Already initialized");
                    return;
                }
                try {
                    // Inject styles
                    injectStyles();
                    // Create session
                    const sessionId = yield this.apiClient.createSession();
                    this.stateManager.setSessionId(sessionId);
                    // Initialize UI components
                    this.button = new FloatingButton(this.config.position || "bottom-right", () => this.toggleChat());
                    this.chat = new ChatPopup(this.config.position || "bottom-right", (message) => this.sendMessage(message), () => this.toggleChat(), this.apiClient, sessionId, this.config, this.redeemManager || undefined);
                    // Mount components
                    this.button.mount();
                    this.chat.mount();
                    // Show welcome message
                    this.chat.showWelcome();
                    // Subscribe to state changes
                    this.stateManager.subscribe((state) => {
                        var _a, _b, _c, _d;
                        if (state.isOpen) {
                            (_a = this.chat) === null || _a === void 0 ? void 0 : _a.show();
                            (_b = this.button) === null || _b === void 0 ? void 0 : _b.hide();
                        }
                        else {
                            (_c = this.chat) === null || _c === void 0 ? void 0 : _c.hide();
                            (_d = this.button) === null || _d === void 0 ? void 0 : _d.show();
                        }
                    });
                    this.initialized = true;
                }
                catch (error) {
                    console.error("MeAgent SDK: Initialization failed", error);
                    throw error;
                }
            });
        }
        /**
         * Toggle chat open/closed
         */
        toggleChat() {
            this.stateManager.toggleChat();
        }
        /**
         * Send a message
         */
        sendMessage(content) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d;
                const state = this.stateManager.getState();
                if (!state.sessionId) {
                    console.error("MeAgent SDK: No active session");
                    return;
                }
                // Add user message
                const userMessage = {
                    id: this.generateId(),
                    role: "user",
                    content,
                    timestamp: Date.now(),
                };
                this.stateManager.addMessage(userMessage);
                (_a = this.chat) === null || _a === void 0 ? void 0 : _a.addMessage(userMessage);
                // Show loading
                this.stateManager.setLoading(true);
                (_b = this.chat) === null || _b === void 0 ? void 0 : _b.setLoading(true);
                (_c = this.chat) === null || _c === void 0 ? void 0 : _c.showLoading();
                let assistantMessage = {
                    id: this.generateId(),
                    role: "assistant",
                    content: "",
                    timestamp: Date.now(),
                };
                let isFirstChunk = true;
                let detectedOffers = [];
                let detectedBrands = [];
                let detectedCategories = [];
                let showWaysToEarnActions = false;
                let hasFinalMessage = false; // Track if we've received a final message
                try {
                    yield this.apiClient.sendMessage(state.sessionId, content, (chunk, rawData) => {
                        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1;
                        // Check for function calls and responses
                        if (rawData) {
                            // Check for query_offers function response
                            if (((_d = (_c = (_b = (_a = rawData.content) === null || _a === void 0 ? void 0 : _a.parts) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.functionResponse) === null || _d === void 0 ? void 0 : _d.name) ===
                                "query_offers") {
                                const matches = ((_e = rawData.content.parts[0].functionResponse.response) === null || _e === void 0 ? void 0 : _e.matches) ||
                                    [];
                                detectedOffers = this.parseOffers(matches);
                            }
                            // Check for get_signup_earning_brands function response
                            if (((_j = (_h = (_g = (_f = rawData.content) === null || _f === void 0 ? void 0 : _f.parts) === null || _g === void 0 ? void 0 : _g[0]) === null || _h === void 0 ? void 0 : _h.functionResponse) === null || _j === void 0 ? void 0 : _j.name) ===
                                "get_signup_earning_brands") {
                                const brands = ((_k = rawData.content.parts[0].functionResponse.response) === null || _k === void 0 ? void 0 : _k.brands) ||
                                    [];
                                detectedBrands = this.parseBrands(brands);
                                console.log("[SDK] Detected signup earning brands:", detectedBrands.length);
                            }
                            // Check for get_category_purchase_earning function response
                            if (((_p = (_o = (_m = (_l = rawData.content) === null || _l === void 0 ? void 0 : _l.parts) === null || _m === void 0 ? void 0 : _m[0]) === null || _o === void 0 ? void 0 : _o.functionResponse) === null || _p === void 0 ? void 0 : _p.name) ===
                                "get_category_purchase_earning") {
                                const categories = ((_q = rawData.content.parts[0].functionResponse.response) === null || _q === void 0 ? void 0 : _q.categories) || [];
                                detectedCategories = mergeCategoriesWithPresets(categories);
                                console.log("[SDK] Detected purchase categories:", detectedCategories.length);
                            }
                            // Check for ways_to_earn function call
                            if (((_u = (_t = (_s = (_r = rawData.content) === null || _r === void 0 ? void 0 : _r.parts) === null || _s === void 0 ? void 0 : _s[0]) === null || _t === void 0 ? void 0 : _t.functionCall) === null || _u === void 0 ? void 0 : _u.name) === "ways_to_earn") {
                                console.log("[SDK] Detected ways_to_earn function call");
                                showWaysToEarnActions = true;
                            }
                        }
                        // Create message container on first data, even if empty text
                        if (isFirstChunk) {
                            (_v = this.chat) === null || _v === void 0 ? void 0 : _v.removeLoading();
                            assistantMessage.content = chunk || "";
                            this.stateManager.addMessage(assistantMessage);
                            (_w = this.chat) === null || _w === void 0 ? void 0 : _w.addMessage(assistantMessage);
                            isFirstChunk = false;
                        }
                        else if (chunk) {
                            // Check if this is a partial/streaming chunk or final complete message
                            const isPartial = (rawData === null || rawData === void 0 ? void 0 : rawData.partial) === true;
                            if (isPartial) {
                                // Streaming chunk (delta) - append it for real-time display
                                assistantMessage.content += chunk;
                                this.stateManager.updateLastMessage(assistantMessage.content);
                                (_x = this.chat) === null || _x === void 0 ? void 0 : _x.updateLastMessage(assistantMessage.content);
                            }
                            else if ((_0 = (_z = (_y = rawData === null || rawData === void 0 ? void 0 : rawData.content) === null || _y === void 0 ? void 0 : _y.parts) === null || _z === void 0 ? void 0 : _z[0]) === null || _0 === void 0 ? void 0 : _0.text) {
                                // Final complete message
                                if (hasFinalMessage) {
                                    // We already have a final message, so this is additional text
                                    // after a function call - append it with spacing
                                    assistantMessage.content += "\n\n" + chunk;
                                }
                                else {
                                    // First final message - replace to ensure accuracy
                                    assistantMessage.content = chunk;
                                    hasFinalMessage = true;
                                }
                                this.stateManager.updateLastMessage(assistantMessage.content);
                                (_1 = this.chat) === null || _1 === void 0 ? void 0 : _1.updateLastMessage(assistantMessage.content);
                            }
                        }
                    }, () => {
                        var _a, _b, _c, _d, _e, _f;
                        // On complete
                        this.stateManager.setLoading(false);
                        (_a = this.chat) === null || _a === void 0 ? void 0 : _a.setLoading(false);
                        (_b = this.chat) === null || _b === void 0 ? void 0 : _b.removeLoading();
                        // Show offer preview if offers were found
                        if (detectedOffers.length > 0) {
                            (_c = this.chat) === null || _c === void 0 ? void 0 : _c.showOfferPreview(detectedOffers);
                        }
                        // Show brand preview if brands were found
                        if (detectedBrands.length > 0) {
                            (_d = this.chat) === null || _d === void 0 ? void 0 : _d.showBrandPreview(detectedBrands);
                        }
                        // Show category preview if categories were found
                        if (detectedCategories.length > 0) {
                            (_e = this.chat) === null || _e === void 0 ? void 0 : _e.showCategoryPreview(detectedCategories);
                        }
                        // Show ways to earn quick actions if function was called
                        if (showWaysToEarnActions) {
                            console.log("[SDK] Showing ways to earn actions");
                            (_f = this.chat) === null || _f === void 0 ? void 0 : _f.showWaysToEarnActions();
                        }
                    }, (error) => {
                        var _a, _b, _c;
                        // On error
                        console.error("MeAgent SDK: Error sending message", error);
                        this.stateManager.setLoading(false);
                        (_a = this.chat) === null || _a === void 0 ? void 0 : _a.setLoading(false);
                        (_b = this.chat) === null || _b === void 0 ? void 0 : _b.removeLoading();
                        const errorMessage = {
                            id: this.generateId(),
                            role: "assistant",
                            content: "Sorry, something went wrong. Please try again.",
                            timestamp: Date.now(),
                        };
                        this.stateManager.addMessage(errorMessage);
                        (_c = this.chat) === null || _c === void 0 ? void 0 : _c.addMessage(errorMessage);
                    });
                }
                catch (error) {
                    console.error("MeAgent SDK: Error in sendMessage", error);
                    this.stateManager.setLoading(false);
                    (_d = this.chat) === null || _d === void 0 ? void 0 : _d.setLoading(false);
                }
            });
        }
        /**
         * Parse offers from function response
         */
        parseOffers(matches) {
            return matches.map((match) => {
                return {
                    id: match[0] || "",
                    name: match[1] || "Unnamed Offer",
                    offerCode: match[2] || "",
                    price: match[3] || 0,
                    description: match[4] || "",
                    discountType: match[6] || "",
                    discountPercentage: match[7] || 0,
                    brandName: match[12] || "Unknown Brand",
                    image: match[13] || undefined,
                };
            });
        }
        /**
         * Parse brands from function response
         */
        parseBrands(brands) {
            return brands.map((brand) => {
                return {
                    id: brand.id || "",
                    name: brand.name || "Unknown Brand",
                    logoUrl: brand.logoUrl || null,
                    description: brand.description || null,
                    websiteUrl: brand.websiteUrl || null,
                    shopifyStoreUrl: brand.shopifyStoreUrl || null,
                    network: brand.network || "sepolia",
                    categoryId: brand.categoryId || "",
                    categoryName: brand.categoryName || "Unknown Category",
                    rewardDetails: brand.rewardDetails || {
                        earningMethodId: "",
                        earningType: "sign_up",
                        isActive: true,
                        rewardExistingCustomers: false,
                        rewardInfo: {
                            id: "",
                            rewardName: "",
                            rewardSymbol: "",
                            rewardImage: "",
                            rewardValueInDollars: "0",
                            rewardOriginalValue: "0",
                        },
                        rules: [],
                    },
                };
            });
        }
        /**
         * Generate a unique ID
         */
        generateId() {
            return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
        }
        /**
         * Destroy the SDK
         */
        destroy() {
            var _a, _b;
            (_a = this.button) === null || _a === void 0 ? void 0 : _a.unmount();
            (_b = this.chat) === null || _b === void 0 ? void 0 : _b.unmount();
            this.initialized = false;
        }
    }

    let sdkInstance = null;
    /**
     * Initialize the MeAgent SDK
     */
    function init(config) {
        return __awaiter(this, void 0, void 0, function* () {
            if (sdkInstance) {
                console.warn('MeAgent: Instance already exists. Destroying previous instance.');
                destroy();
            }
            sdkInstance = new MeAgentSDK(config);
            yield sdkInstance.init();
        });
    }
    /**
     * Destroy the SDK instance
     */
    function destroy() {
        if (sdkInstance) {
            sdkInstance.destroy();
            sdkInstance = null;
        }
    }
    // Export for UMD build
    const MeAgent = {
        init,
        destroy,
        Network: exports.SupportedNetwork,
        Environment: exports.Environment,
    };
    // For UMD build - attach to window
    if (typeof window !== 'undefined') {
        window.MeAgent = MeAgent;
    }

    exports.default = MeAgent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=me-agent-sdk.min.js.map
